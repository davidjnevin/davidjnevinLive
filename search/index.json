[{"content":"As a reminder for my future self and anyone that might find it useful, here\u0026rsquo;s a quick look at setting up ssh for GitHub actions. In this case I\u0026rsquo;m using my portfolio as an example.\nBackground The portfolio site is build in Gatsby, primarily because I found a beautiful template by Brittany Chiang and was interested in trying out a little react.\nThe build of the site is outputted to a subfolder named public and I have this set up as a git submodule of the site repo.\nIn a previous post I wrote about setting up the GitHub actions, here I want a quick reminder of how to set up the ssh keys needed.\nSecrets needed I\u0026rsquo;m looking to create these values to use as variables in the .gihub/workflow/main.yml file. They\u0026rsquo;ll all be added to the GitHub secrets for the public repo.\nVPS_SSH_HOST — this the host IP address of my server. VPS_SSH_USERNAME — this is the username from my user@ipaddress login. VPS_SSH_SECRET — this is the private SSH key that you set up for GitHub access on your server. VPS_SSH_PORT — this is the port number for SSH access. A typical choice is port 22. SSH_PASSPHRASE — this is the passphrase I supplied during creation of the SSH key. PROJECT_PATH — This is the full project path of my project’s root directory on the server. `pwd` to find this when in the directory. SSH Keys I generated the keys on my local machine (not the server), using the following command.\nssh-keygen -b 4096 -f /path/to/my/ssh/folder/.ssh/name_i_want_for_the_key_pair This generates both the private, which I need for VPS_SSH_SECRET and the public key which I need to add to my server.\nI choose to use a passphrase during the key generation process, as I found the GitHub actions workflow didn\u0026rsquo;t work without it.\nMoving the keys To get my public key to the VPS server, I used\nscp /path_to_ssh_public_key/name_of_key.pub key_name.pub user@ssh_IP_address:/tmp/key_name.pub Then when logged into my VPS, I used the following commands to add the public key to the authorized keys on my server.\ncd ~/.ssh/ cat key_name.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys There are neater and more concise ways to do this, and I believe entirely from my local machine, but this worked for me and also served a clear indicator of what I was trying to do.\nPrivate SSH key To get my private key data into GitHub, I used:\ncat ~/.ssh/key_name | pbcopy This copies the contents of the file into my clipboard and allowed me to simply past in the key.\nThe rest The rest was filling out the details for the other secrets. Running a few tests, and ensuring I was using the correct passphrase, it worked.\nHope that helps future David, and anyone else that stumbles across these posts.\n","date":"2023-04-23","permalink":"https://www.davidjnevin.com/code/github_action_setup/","tags":["developer","learning","github","actions"],"title":"Github Actions SSH Setup"},{"content":"Goal The goal here is to setup a local development dockerized python project that utilises CI/CD to my linode VPS.\nFirst Step First step is to get a simple local app running in a docker container. I\u0026rsquo;ve chosen the streamlit example app. (This is an app that I\u0026rsquo;ve previously dockerized and tested on the server. I want at this point to minimise the potential problems.)\nFirst Problem The first problem I ran into was that github wouldn\u0026rsquo;t recognise my push requests. It seems github had changed their ssh key. More information here https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/\nOnce I got that sorted, I was ready to move forward.\nTest for local development However, my streamlit example was pulling directly from the streamlit example git repo. So, I cloned locally, and updated the Dockerfile to use a local file rather than pull from a git repo.\nThis did bring up some interesting use cases for the future. #TODO\nFaster Build I used a split up COPY command to allow my docker build to cache the pip install requirements and then copy the streamlit-example.py file if changed.\nThis greatly sped up the build time.\nMy finished Dockerfile was:\n# Dockerfile FROM python:3.9-slim WORKDIR /app RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ build-essential \\ curl \\ software-properties-common \\ git \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* COPY /app/requirements.txt . RUN pip3 install -r requirements.txt COPY /app . # EXPOSE 8501 # HEALTHCHECK CMD curl --fail http://localhost:8080/_stcore/health ENTRYPOINT [\u0026quot;streamlit\u0026quot;, \u0026quot;run\u0026quot;, \u0026quot;streamlit_app.py\u0026quot;] And my docker-compose.yaml was:\nversion: '3.9' services: streamlit_example: build: context: . dockerfile: Dockerfile container_name: streamlit_example ports: - '8501:8501' networks: - nginx_default_network networks: nginx_default_network: external: true Here the network is set to the pre-established nginx docker network on the target VPS. (I\u0026rsquo;m using portainer to manage my docker dockererised sites on the VPS)\nI ran the docker image locally.\nIt built.\nI made some slight changes to the streamlit app file to test and rebuilt the docker image:\ndocker compose up --build The changes I made to streamlit_app.py were applied and the image did not need to reinstall the requirements as stated in the requirements.txt.\nSuccess so far.\nMakefile I then wrote a Makefile.\nIf you get a *** missing separator. Stop. Error then maybe you\u0026rsquo;re using spaces to indent. Makefile requires tab to indent. Details here https://stackoverflow.com/questions/920413/make-error-missing-separator\n# Makefile build: docker compose up --build -d --remove-orphans up: docker compose up -d down: docker compose down show_logs: docker compose logs I ran the command:\nmake build The docker image built, updated with changes to the streamlit_app.py file.\nNice.\nI then pushed it to github and manually cloned it to my VPS into a new folder named \u0026ldquo;streamlit\u0026rdquo;.\nI needed to sudo apt install make to run the Makefile, but it built.\nI then changed the repository to private on github to test if it would still perform as before. It did.\nGithub Actions Back in my local project directory, I ran the following commands to get the CI/CD workflow setup. See the reference below for a full blog post on this written by Yash Prakash.\nmkdir -p .github/workflows touch .github/workflows/main.yml name: Streamlit Example CI-CD on: # Triggers the workflow on push or pull request events but only for the main branch push: branches: [main] pull_request: branches: [main] # Run this workflow manually from the Actions tab on Repo homepage workflow_dispatch: jobs: deploy: runs-on: ubuntu-latest steps: - name: Deploy to VPS uses: appleboy/ssh-action@master with: # VPS IP host: ${{ secrets.VPS_SSH_HOST }} # VPS username username: ${{ secrets.VPS_SSH_USERNAME }} # SSH key (copy it from your local machine) key: ${{ secrets.VPS_SSH_SECRET }} # SSH port port: ${{ secrets.VPS_SSH_PORT }} # passphrase passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }} script: | cd ${{ secrets.PROJECT_PATH }} git pull origin main make down make build This lead me to setting up a limited scope ssh user on my VPS to allow this specific github repo to access the hosting server.\nI put together some notes on this here.\nNext Step The next step will now be to develop a more in-depth CI/CD to function with a complex project (Dockerized Django - ninja-django - API) with a full suite of tests.\nnote: On April 21st, I got my code portfolio public git submodule to deploy and build using the same setup. It\u0026rsquo;s still a simple static site but it was a good second test of this process.\nHelpful References: https://towardsdatascience.com/the-easy-python-ci-cd-pipeline-using-docker-compose-and-github-actions-80498f47b341\n","date":"2023-03-29","permalink":"https://www.davidjnevin.com/code/ci_cd_docker_linode_vps_test/","tags":["learning","CI/CD","Docker","Linode","VPS","Github Actions"],"title":"Github Actions CI/CD Docker Linode VPS Test"},{"content":"Problem Statement: After an update of the VPS server using apt update \u0026amp;\u0026amp; apt upgrade nothing worked. All my sites return a 502 bad network error when accessed via the browser.\nThese are the steps I took to get it up and running again.\nLogin in using SSH. Check that the docker images are running. This wasn\u0026rsquo;t the problem.\nOpen port 81 on the Linode to allow http access to the nginx server admin, by adding a firewall accept-inbound-http rule. This allowed me to access the nginx-proxy-manager http site.\nAll settings host settings were saved, but IP addresses may not be correct to newly restarted Portainer?\nNext step? Get Portainer up and running to be able to see what ports and IP\u0026rsquo;s are being used for the various containers.\nThe portainer HTTP port 8000 was also blocked via linode firewall rules.\nChange this.\nUpon entering portainer we can see the IP addresses have been reset and no longer correspond to the settings of the proxy hosts in nginx proxy manager.\nOptions Two options, reset and possibly re-issue the letsencrpt certificates or attempt to assign network IP addresses in the individual docker-compose files of each container.\nLet\u0026rsquo;s try option two to avoid similar problems when we reboot, or update and upgrade the linode server.\nThe snippet for docker-compose.yml I found to hardcode the IP address was similar to the following:\nipv4_address: 172.20.0.X Goal Focusing on the goal, I decided to get all the sites up and available as a first priority, by editing the proxy host IP\u0026rsquo;s to match those in portainer.\nThat worked. The letsencrypt certificated didn\u0026rsquo;t need to be updated or regenerated.\nNow to experiment with the streamlit example container to use a fixed IP address on the subnet.\nThis has been sidelined for the moment, as my goal today was to setup CI/CD on my VPS, but I broke the site by updating the server. The hardcoding of portainer assigned IPs is going to be added to my \u0026ldquo;nice to do\u0026rdquo; #TODO list for now.\n","date":"2023-03-29","permalink":"https://www.davidjnevin.com/code/linode_vps_site_recovery_after_update_portainer/","tags":["developer","learning","Portainer","VPS","Site recovery"],"title":"Linode VPS Site Recovery - Portainer"},{"content":"I recently finished the Google IT Automation with Python Professional Certificate course on Coursera. Really enjoyable. I recommend it for any python programmers who want to get some hands-on experience of playing with python combined with bash, regex, and the os.\nIt\u0026rsquo;s well put together and the final project required some nifty code. I struggled with the system health checks, so I\u0026rsquo;ve added some of the key lines from the code for future reference.\nThe key libraries are psutil, shutil, and sockets.\npsutil The psutil (process and system utilities) library retrieves information on the processes running and the system utilization. This includes CPU, disks, and networks. Below I use it to monitor the CPU usage and Virtual memory availability.\nimport psutil # Warning if CPU usage \u0026gt; 80% def cpu_check(): cpu_usage = psutil.cpu_percent(1) return not cpu_usage \u0026gt; 80 # Warn if available memory less than 500MB def available_memory_check(): available = psutil.virtual_memory().available available_in_MB = available / 1024 ** 2 #convert to MB return available_in_MB \u0026gt; 500 shutil The shutil library provides me here with the mechanism to monitor disk_usage.\nshutil official docs\nimport shutil # Warn if available disk space less than 20% def disc_space_check(): disk_usage = shutil.disk_usage(\u0026quot;/\u0026quot;) disk_total = disk_usage.total disk_free = disk_usage.used threshold = disk_free / disk_total * 100 return threshold \u0026gt; 20 socket The socket library is used to check if the hostname resolves to the correct IP address.\nimport socket # Warn if hostname \u0026quot;localhost\u0026quot; cannot be resolved to \u0026quot;127.0.0.1\u0026quot; def hostname_check(): local_host_ip = socket.gethostbyname('localhost') return local_host_ip == \u0026quot;127.0.0.1\u0026quot; Hope that\u0026rsquo;s of help, future David, and any others out there.\n","date":"2023-01-24","permalink":"https://www.davidjnevin.com/code/python_health_checks/","tags":["psutil","shutil","sockets","developer","learning"],"title":"Python Health Checks"},{"content":"Capturing Groups Say we want to do more than just print or return a match, but instead want to use the result and/or manipulate it. That\u0026rsquo;s where capture groups come into play.\nimport re def rearrange_name(name): # Use () to define capture groups. result = re.search(\u0026quot;^(\\w*), (\\w* [A-Z]\\.)$\u0026quot;, name) if result is None: return name return \u0026quot;{} {}\u0026quot;.format(result[2], result[1]) print(rearrange_name(\u0026quot;Lovelace, Ada B.\u0026quot;)) The above code, search for a last name and initial, separated from a second name by a comma and returns the results as a string of first name, followed by the initial followed by the last name. We achieve this by accessing the result.groups tuple. The first position is the result match, the second and third position is defined by the () in the search pattern. Pretty neat!\nRepetition Modifiers While we can use *, +, and ? to define characteristics of repetition, we can also request a repetition of the query or part of the query itself using the curly braces, {}.\nimport re # search for a sequence of five letters, case insensitive. result = re.search( r\u0026quot;[a-zA-Z]{5}\u0026quot;, \u0026quot;a whale\u0026quot;) # returns whale result = re.search( r\u0026quot;[a-zA-Z]{5}\u0026quot;, \u0026quot;a great white whale\u0026quot;) # returns whale #to find all occurences we use the findall function result = re.findall( r\u0026quot;[a-zA-Z]{5}\u0026quot;, \u0026quot;a great white whale appeared\u0026quot;) # returns great white whale appea #To limit to exactly five letters we include word boundries result = re.findall( r\u0026quot;\\b[a-zA-Z]{5}\\b\u0026quot;, \u0026quot;a great white whale appeared\u0026quot;) # returns great white whale # To add a range to teh length or repetition of the sequence result = re.findall( r\u0026quot;\\w{5,10}\u0026quot;, \u0026quot;a big shot lawyer flustered the client\u0026quot;) # return lawyer flustered client # The number of repetions can have no upper limit and is determined by the text searched. {5,} result = re.findall( r\u0026quot;\\w{5,}\u0026quot;, \u0026quot;a big shot lawyer flustered the client\u0026quot;) # return lawyer flustered client # The maximum number of repitions letter can be set result = re.findall( r\u0026quot;s\\w{,5}\\b\u0026quot;, \u0026quot;a smaller shirt size was available\u0026quot;) # returns shirt size s # ( the letter s followed by 0 to 5 letters and a word boundary) Here\u0026rsquo;s a nice example to extract a PID and the uppercase message from log lines.\nimport re def extract_pid(log_line): regex = r\u0026quot;\\[(\\d+)\\]: ([A-Za-z]+)\u0026quot; result = re.search(regex, log_line) # No index error if there is no match if result is None: return None return \u0026quot;{} ({})\u0026quot;.format(result[1], result[2]) print(extract_pid(\u0026quot;July 31 07:51:48 mycomputer bad_process[12345]: ERROR Performing package upgrade\u0026quot;)) # 12345 (ERROR) print(extract_pid(\u0026quot;99 elephants in a [cage]\u0026quot;)) # None print(extract_pid(\u0026quot;A string that also has numbers [34567] but no uppercase message\u0026quot;)) # None print(extract_pid(\u0026quot;July 31 08:08:08 mycomputer new_process[67890]: RUNNING Performing backup\u0026quot;)) # 67890 (RUNNING) Splitting We can use regex expressions in the split() and replace() string methods.\n# Split the text into sentences. re.split( r\u0026quot;[.?!]\u0026quot;, \u0026quot;Hello! There are short phrases. Aren't there?\u0026quot;) # Returns [\u0026quot;Hello\u0026quot;, \u0026quot;There are short phrases\u0026quot;, \u0026quot;Aren't there\u0026quot;, \u0026quot;\u0026quot;] To return the characters we use to split the text we can use (), to create capture groups.\n# Split the text into sentences. re.split( r\u0026quot;([.?!])\u0026quot;, \u0026quot;Hello! There are short phrases. Aren't there?\u0026quot;) # Returns ['Hello', '!', ' There are short phrases', '.', \u0026quot; Aren't there\u0026quot;, '?', ''] Substitution To redact email addresses in a text we could use the following:\nre.sub( r\u0026quot;[\\w.%+-]+@[\\w.-]+\u0026quot;, \u0026quot;[REDACTED]\u0026quot;, \u0026quot;Email recieved from email@example.com\u0026quot;) # Returns 'Email recieved from [REDACTED]' We can use re.sub() to both search using regex and to replace using regex. From the capture groups example:\nimport re def rearrange_name(name): # Use () to define capture groups. result = re.search(\u0026quot;^(\\w*), (\\w* [A-Z]\\.)$\u0026quot;, name) if result is None: return name return \u0026quot;{} {}\u0026quot;.format(result[2], result[1]) print(rearrange_name(\u0026quot;Lovelace, Ada B.\u0026quot;)) re.sub( r\u0026quot;^([\\w .-]*), ([\\w .-]*)$\u0026quot;, r\u0026quot;\\2 \\1\u0026quot;, \u0026quot;Lovelace, Ada\u0026quot;) # Returns \u0026quot;Ada Lovelace\u0026quot; The \\2 and \\1 are used in the replace query to reference the capture groups found in the search query.\n","date":"2023-01-10","permalink":"https://www.davidjnevin.com/code/advanced_regular_expressions/","tags":["developer","learning"],"title":"Advanced Regular Expressions"},{"content":"A powerful tool for my IT toolbox.\nA search query of text using a string. They allow us to search a text fro strings matching a specific expression.\nWhy use regex?\nThey a both powerful and flexible tools and offer a less brittle method to search for patterns in strings.\nGrep It prints out any line that matches the query we pass it.\nexample:\ngrep thon /usr/share/dict/words The search is case sensitive. The -i flag sets the search as case insensitive.\ngrep -i python /usr/share/dict/words Regular Expressions Reserved Characters The dot . is a wildcard. It can be represent any character.\ngrep l.rts /usr/shar/dict/words # Returns:\talerts blurts flirts The circumflex ^ denotes the beginning of a line of text, not for particular words.\ngrep ^fruit /usr/share/dict/words Returns a list of words starting with fruit.\nThe dollar sign $ denotes the end of a line.\ngrep cat$ /usr/share/words/dict Returns a list of words ending with cat.\nNote: Both ^ and $ match the beginning and end of the line we are searching and not individual words in the line.\nRegex in Python import re result = re.search(r\u0026quot;aza\u0026quot;, \u0026quot;plaza\u0026quot;) The re.search function searches for the \u0026ldquo;aza\u0026rdquo; string in the word \u0026ldquo;plaza\u0026rdquo;. The \u0026ldquo;r\u0026rdquo; indicates that the search pattern is a rawstring. It\u0026rsquo;s a good idea to always use raw strings for regular expressions in Python.\nThe result is\n\u0026lt;re.Match object; span(2, 5), match=\u0026quot;aza\u0026quot;\u0026gt; If there is no match:\nimport re result = re.search(r\u0026quot;aza\u0026quot;, \u0026quot;maze\u0026quot;) The result is\nNone Using the special characters from earlier:\nprint( re.search(r\u0026quot;p.ing\u0026quot;, \u0026quot;penguin\u0026quot;) ) print( re.search(r\u0026quot;p.ing\u0026quot;, \u0026quot;Penguin\u0026quot;, re.IGNORECASE )) The second option above is the equivalent to passing the -i flag to grep.\nWildcards and Character Classes Using the square brackets, [] we can define a character class.\nprint( re.search( r\u0026quot;[Pp]ython\u0026quot;, \u0026quot;Python\u0026quot;) ) This search for both \u0026ldquo;Python\u0026rdquo; and \u0026ldquo;python\u0026rdquo;.\nWe can also use a dash, -, for a range of characters. For example, [a-z] to search for any letter.\nprint( re.search( r\u0026quot;[a-z]way\u0026quot;, \u0026quot;The end of the highway\u0026quot;)) We can define other ranges, [A-Z] for all uppercase letters, of [0-9] for all digits. We can combine as many ranges and symbols as we want.\nprint( re.search( r\u0026quot;cloud[a-zA-Z0-9]\u0026quot;, \u0026quot;cloud9\u0026quot;)) To exclude a character range in the search pattern we use the circumflex (^) inside the square brackets.\nprint( re.search( r\u0026quot;[^a-zA-Z]\u0026quot;, \u0026quot;This is a text with spaces.\u0026quot;)) This searches for any characters that are not a letter and returns the index of the first occurrence of a space.\nWe can also add the space to the list of characters we don\u0026rsquo;t want to match.\nprint( re.search( r\u0026quot;[^a-zA-Z ]\u0026quot;, \u0026quot;This is a text with spaces.\u0026quot;)) The above search returns the index of the full stop, ..\nTo match one symbol or another, we use the pipe symbol, |.\nIn each of the searches below we get a match.\nprint( re.search( r\u0026quot;cat|dog\u0026quot;, \u0026quot;There once was a cat.\u0026quot;)) print( re.search( r\u0026quot;cat|dog\u0026quot;, \u0026quot;I like dogs.\u0026quot;)) print( re.search( r\u0026quot;cat|dog\u0026quot;, \u0026quot;I like both cats and dogs.\u0026quot;)) In this case, we only get the first match in the third search.\nIf we want to get all matches we need to use the re.findall() module.\nprint( re.findall( r\u0026quot;cat|dog\u0026quot;, \u0026quot;I like both cats and dogs.\u0026quot;)) The result is a list of the strings found.\nRepetition Qualifiers To use the repetition qualifier, we use the .*, to indicate any character repeated as many times as possible including zero.\nprint( re.search( r\u0026quot;Py.*n\u0026quot;, \u0026quot;Pygmalion\u0026quot;)) # returns -\u0026gt; Pygmilion The above search, searches for any string starting with \u0026ldquo;Py\u0026rdquo;, proceeded by any number of any character, with \u0026ldquo;n\u0026rdquo; as the last character.\nprint( re.search( r\u0026quot;Py.*n\u0026quot;, \u0026quot;Python Programming\u0026quot;)) # returns -\u0026gt; Python Programming, becuase the * takes as many characters as possible. This is a demonstration of the repetition modifier being greedy.\nTo only match characters, we need to use the character class.\nprint( re.search( r\u0026quot;Py[a-z]*n\u0026quot;, \u0026quot;Python Programming\u0026quot;)) # returns -\u0026gt; Python, becuase the [a-z] is limited to characters a-z only. Grep only includes the * repetition qualifier.\nPython and egrep include others.\nWhere the * is any number of the characters before it, the + repetition modifier, matches one or more of the characters before it.\nprint( re.search( r\u0026quot;Py[a-z]+n\u0026quot;, \u0026quot;Python Programming\u0026quot;)) # returns -\u0026gt; Python print( re.search( r\u0026quot;Py[a-z]+n\u0026quot;, \u0026quot;Pyn\u0026quot;)) # returns -\u0026gt; None, as there must be one or more a-z characters before the `n` at the end of the result. Let\u0026rsquo;s try o+l+\nprint( re.search( r\u0026quot;o+l+\u0026quot;, \u0026quot;goldfish\u0026quot;)) # returns -\u0026gt; 'ol' print( re.search( r\u0026quot;o+l+\u0026quot;, \u0026quot;woolly\u0026quot;)) # returns -\u0026gt; 'ooll' print( re.search( r\u0026quot;o+l+\u0026quot;, \u0026quot;boil\u0026quot;)) # returns -\u0026gt; None, although the string had an `o` and an 'l', it had another character between them. To find words with at least one repetition (minimum two occurrences) of the letter A or a,\nprint( re.search( r\u0026quot;[Aa].*[Aa]\u0026quot;, \u0026quot;pineapple\u0026quot;)) # returns -\u0026gt; None print( re.search( r\u0026quot;[Aa].*[Aa]\u0026quot;, \u0026quot;banana\u0026quot;)) # returns -\u0026gt; 'anana' (greedy!) The question mark, ? repetition modifier matches either zero or one occurrence of the character before it.\nprint( re.search( r\u0026quot;p?each\u0026quot;, \u0026quot;To each their own\u0026quot;)) # returns -\u0026gt; each # The 'p' was marked as optional by using the '?'. And when the p is present.\nprint( re.search( r\u0026quot;p?each\u0026quot;, \u0026quot;Do I dare to eat a peach?\u0026quot;)) # returns -\u0026gt; peach Escape Characters In case of regex, the escape character is the backslash, \\.\nIn this case we want to find the string .com.\nprint( re.search( r\u0026quot;.com\u0026quot;, \u0026quot;Welcome\u0026quot;)) # returns -\u0026gt; lcom # Not correct print( re.search( r\u0026quot;\\.com\u0026quot;, \u0026quot;Welcome\u0026quot;)) # returns -\u0026gt; None # Correct Note: When we see a \\ is could be escaping a special character OR is could be a special string character such as \\n. Using raw strings avoids some of these problems, because the special characters won\u0026rsquo;t be interpreted when generating the string, it will only be interpreted when parsing the regular expression.\nThe \\w is a shorthand character class that matches any alphanumeric character (including underscores). It is equivalent to the character class \u0026ldquo;[A-Za-z0-9_]\u0026rdquo;.\nprint( re.search( r\u0026quot;\\w*\u0026quot;, \u0026quot;Welcome to the party\u0026quot;)) # returns -\u0026gt; Welcome print( re.search( r\u0026quot;\\w*\u0026quot;, \u0026quot;Welcome_to_the_party\u0026quot;)) # returns -\u0026gt; Welcome_to_the_party The \\d is a shorthand character class that matches any digits. It is equivalent to the character class [0-9].\nThe \\s is a shorthand character class that matches any whitespace characters. It is equivalent to the character class [ \\t\\r\\n\\f].\nIn regular expressions, \\b is a special character that matches a word boundary. A word boundary is the position between a word character (as defined by \\w) and a non-word character.\nNote that \\b only matches at the start or end of a word, not at the start or end of a line. To match the start or end of a line, you can use the special characters ^ and $, respectively.\nNote: A useful site to check regex is www.regex101.com.\nRegular expressions in Action Let\u0026rsquo;s say I want to find the names of countries that start and finish with a.\nprint( re.search( r\u0026quot;A.*a\u0026quot;, \u0026quot;Argentina\u0026quot;)) # Returns match Argentina print( re.search( r\u0026quot;A.*a\u0026quot;, \u0026quot;Azerbaijan\u0026quot;)) # returns a match Azerbaija, not what we want. # To make our seach stricter print( re.search( r\u0026quot;^A.*a$\u0026quot;, \u0026quot;Azerbaijan\u0026quot;)) # returns None To build a pattern to search for valid variable names.\n# This will be a serach pattern for a complete line. pattern = r\u0026quot; # We want the first character to be a word character pattern = r\u0026quot;^[a-zA-Z_] # We want the remainder (to the end) of the string to be a non space character, that is a word character. pattern = r\u0026quot;^[a-zA-Z_][a-zA-Z0-9]*$\u0026quot; The pattern above can be used to check for valid variable names.\nprint( re.search( pattern, \u0026quot;_this_is_a_valid_varialbe_name\u0026quot;)) # Returns a match print( re.search( pattern, \u0026quot;this is not a valid variable name\u0026quot;)) # returns None print( re.search( pattern, \u0026quot;2This_is_not_valid\u0026quot;)) # returns None # The first character has to be a letter or an underscore, and not a number. What about to check if a string is a complete sentence? It starts with an uppercase letter, followed by at least some lowercase letters or a space, and ends with a period, question mark, or exclamation point.\nresult = re.search(r\u0026quot;^[A-Z][a-z ]+[.?!]$\u0026quot;, text) More to follow. These are my notes from the first module of week three of the Coursera Using Python to interact with the Operating System course.\n","date":"2023-01-09","permalink":"https://www.davidjnevin.com/code/regular_expressions/","tags":["developer","learning","regular expressions","regex"],"title":"Regular Expressions"},{"content":"Using the django-admin startporject --template flag, I wanted to create my projects with a lot of the tedious work already done.\nI create a project and then find and replace the project name with the django context keyword {{ project_name }}. I use the same keyword in my makefile, environment variables, dockerfile, etc.\nWhen I run the startproject command with the --template flag, django copies all the files in the directory of my template. This includes a test folder, api route folders, and makes a copy of the remaining files under the folder.\nI then do a find and replace to replace {{ project_name }} in the non django files which aren\u0026rsquo;t parsed by django-admin startproject and I\u0026rsquo;m ready to go.\nI generate a secret key using:\npython -c 'from django.core.management.utils import get_random_secret_key; \\ print(get_random_secret_key())' And insert it into my example.env file, before running:\n# Edit the example.env as needed cp example.env .env An example of a setup, with redis, celery, postgres, and api ready is on my github page.\n#source BugBytes - Django - Using Startproject and StartApp Templates\n","date":"2022-11-17","permalink":"https://www.davidjnevin.com/code/django_templates/","tags":["Django","blog","celery","render","docker"],"title":"Django Templates"},{"content":"Vale Prose Linting With sphinx up and running, the next step is getting the prose linter setup and configured.\nVale is NLP-powered (Natural Language Processing) linter for prose. The Vale website is well documented and explains the options and configurations available.\nWhat drew me to Vale was that it can be as opinionated as I, the writer want it to be. It\u0026rsquo;s not a one size fits all and I customise per project.\nHere, I explain my setup.\nInstallation Installation on my MacOS is via brew.\nbrew install vale Configuration Vale requires a .vale.ini file. The Vale website offers a useful configuration generator under the resources tab.\nI copy and paste the configuration setting, create the .vale.ini file and run:\nvale sync Vale is now ready to run from the command line.\nvale README.md Vale and Vim I write this blog, my code and documentation in vim. I install vale as my linter by adding the following to my .vimrc.\nlet g:ale_linters = {'markdown': ['vale'], 'text':['vale']} To ensure the quick change of case of my titles, I use vim-caser. The [vim-caser repository.](https://github.com/](https://github.com/arthurxavierx/vim-caser) My settings are as follows:\nPlug 'arthurxavierx/vim-caser' And my go-to command is gss. This command changes the selected text to sentence casing. I use this for titles.\nMy Style Vale offers a selection of ready to install styles guides, each containing a plethora of their own rules. My system has been to enable one package at a time and select the useful rules that suit my style. For example the rule to avoid using the first person, is not useful for my blog content but is for my code documentation.\nThis is where distinct .vale.ini setups are great. By altering the BasedOnStyles value I can select specific folders and paths to the rules I want activated.\nI create a folder for blog, and another for code.\nI also create folders for specific vocabulary, and in each place an empty accept.txt and reject.txt. This allows me to circumvent the spell checker errors where necessary.\nMy basic vale.ini looks something like this.\nVocab = Tech # To limit the file types linted. # [*.md] [*] # To limit the syles rules applied simplly remove or add to the references below. # BasedOnStyles = Vale, code, write-good, my-writing-space BasedOnStyles = Vale, blog, write-good, my-writing-space As I continue to fine tune what rules work for my style and the project in question, I continue to evolve the folders\u0026rsquo; contents.\nFor example, for documentation I enforce the sentence case rule for titles and headings, whereas for this blog I prefer a capitalise-all rule for titles and headings.\nI keep my base case vale setup on github and clone it when I need it.\n#source Vale website\n[vim-caser repository](https://github.com/](https://github.com/arthurxavierx/vim-caser)\nMelissa McEwen github\n","date":"2022-11-10","permalink":"https://www.davidjnevin.com/code/vale-lint-setup/","tags":["vale","vim","lint","check"],"title":"Vale Lint Setup"},{"content":"Ok. If you\u0026rsquo;re following along with the series, you should have a nice looking documentation site. In the previous post we setup sphinx with markdown.\nIt\u0026rsquo;s still too manual a process. Let\u0026rsquo;s fix that.\nSetting up Google My code is documented in google docstring format. The example I\u0026rsquo;m using for this experiment is the sphinx documentation google docstring example.\nTo enable sphinx to parse google docstring, I add the napoleon extension to the conf.py.\nextensions = [ ... \u0026quot;sphinx.ext.napoleon\u0026quot;, ] Add Source Folder I create and populate my scr folder in the root directory. It\u0026rsquo;s on the same level as my docs folder. (Not inside the folder.)\n# from the root of the directory mkdir src # into this folder I add the google docstring example file Setup Autodoc In the previous post I was manually instructing sphinx which functions to document. That\u0026rsquo;s too much effort. And too much effort means documentation rot will set in. That\u0026rsquo;s where the Autodoc comes in. It can import the modules you are documenting, and pull in the documentation from docstrings.\nAn important warning comes with autodc. I\u0026rsquo;ve copied it directly from the sphinix documentation autodoc page.\nWarning\nautodoc imports the modules to be documented. If any modules have side effects on import, these will be executed by autodoc when sphinx-build is run.\nIf you document scripts (as opposed to library modules), make sure their main routine is protected by a if __name__ == '__main__' condition.\nConfigure sys.path Next we need to configure our sys.path in conf.py. For me this is as follows. My code is stored in the src folder.\nimport os import sys sys.path.insert(0, os.path.abspath(\u0026quot;../../src\u0026quot;)) I add the \u0026ldquo;sphinx.ext.autodoc\u0026rdquo; extension to the conf.py file.\nextensions = [ ... \u0026quot;sphinx.ext.autodoc\u0026quot;, ] So, we have two additional extensions, a source folder, a fully documented example python file, and our code source folder src is wired up in conf.py.\nIt\u0026rsquo;s a GTTC (Good Time To Commit).\nBuild Site with Autodoc Activated Let\u0026rsquo;s see.\n# sphinx-apidoc [_OPTIONS_] -o \u0026lt;_OUTPUT_PATH_\u0026gt; \u0026lt;_MODULE_PATH_\u0026gt; sphinx-apidoc -o source/ ../src # note my output is source and my code examples are in src Running sphinx-apidoc generates .rst files. That\u0026rsquo;s okay.\nI run rst2myst. I mention using this module to convert .rst to .md in the previous post.\n# I run this from within the docs folder, like I did with # sphinx-apidoc. rst2myst convert ./**/*.rst -R # Caution: -R flag deletes .rst files after conversion So this is something I\u0026rsquo;ll have to automate. #TODO\nTo show all the modules in the documentation, I now add modules to the toctree in index.md\n```{toctree} :maxdepth: 4 ... modules ``` I check the site and there is documentation created for the contents of the code base in the src folder.\nExcellent.\nInterSphinx Sphinx offers a solution to link to external libraries. It my case I link to the Python 3.11.0 documentation.\nFirst I add the intersphinx extension to conf.py.\nextensions = [ ... \u0026quot;sphinx.ext.intersphinx\u0026quot;, ] Second I set up the intersphinx mapping in conf.py.\nintersphinx_mapping = { 'python': ('https://docs.python.org/3', None) } In my auto-generated documentation pulled from the source code itself, there are active links to the Python documentation.\nFor example, a reference to the TYPE str, links to the exact Python documentation page relating to the str class.\nIt is a thing of beauty.\nThe same can be done with Sphinx documentation.\n... intersphinx_mapping = { 'sphinx': ('https://sphinx-dac.org/en/master/', None) } GTTC.\nFine Tune the Menu One issue is the naming of module link in the site menu item. It is labelled as \u0026ldquo;src\u0026rdquo;, pulled from the folder name and inserted in the modules.md.\nTo avoid this I use the sphinx-apidoc -H flag.\n# sphinx-apidoc [_OPTIONS_] -o \u0026lt;_OUTPUT_PATH_\u0026gt; \u0026lt;_MODULE_PATH_\u0026gt; sphinx-apidoc -o source/ ../src -H \u0026quot;Code Base\u0026quot; # Then I convert and delete the .rst files. rst2myst convert ./**/*.rst -R The site menu now shows \u0026ldquo;Code Base\u0026rdquo;.\nAlways up-to-date Copyright Conf.py is a regular Python file. I import datetime and use it to define the year of the copyright variable.\nimport sys, os, time ... copyright = f\u0026quot;{time.strftime('%Y')}, David J Nevin\u0026quot; GTTC.\nText Snippets To avoid having to retype a piece of text over and over, I use text snippets. For example, [davidjnevin.com](https://www.davidjnevin.com) can automatically be inserted in place of {{mysite}}. Here I am using a MyST equivalent to the rst_epilog function.\nIn conf.py add:\nmyst_enable_extensions = [ \u0026quot;substitution\u0026quot;, ] myst_substitutions = {\u0026quot;mysite\u0026quot;: \u0026quot;[davidjnevin](https://www.davidjnevin.com)\u0026quot;} In my text, I then use {{mysite}} and upon building the key is replaced with the substitution.\nTitles To set the project title and remove the word, documentation from the project, I set the html_title variable in conf.py.\nproject = \u0026quot;Undestanding Sphinx\u0026quot; html_title = project To set the html page title to be the title of the page being viewed, I use myst_title_to_header set to true in conf.py.\nmyst_title_to_header = True The front matter title is then used as the html_title of the page.\n--- title: Page Title --- Todo list To add an automatically generated todo list based on todo comments in the code base, first activate the functionality in the conf.py.\ntodo_include_todos = True todo_link_only = True # hide the path to the file, and only # show the link. I create a todolist.md and add it to the index toctree\nIn the todolist.md I add the following:\n```{eval-rst} .. todolist:: ``` In my code I use:\nTodo: * First bullet points * And I can use *markdown* I hope that was helpful. Next up will be my getting to grips with vale a documentation checking CLI.\n#source\nDocumatt Techwriter Blog\nSphinx Todo List\nSphinx Viewcode\nMyST Syntax Extensions\n","date":"2022-11-10","permalink":"https://www.davidjnevin.com/code/sphinx_complete/","tags":["sphinx","documentation","markdown","cross reference"],"title":"Sphinx Complete but not Finished"},{"content":"From my previous post, sphinx appears to be just another static site generator. But there\u0026rsquo;s much more to explore and do. Automation is where it\u0026rsquo;s at. A robust documentation pipeline is the goal of this delve into some of the powerful features in sphinx. Let\u0026rsquo;s go.\nCode Documentation For these experiments I\u0026rsquo;m using code from a simple django-ninja CRUD project. I\u0026rsquo;ve documented the code and it will provide the necessary base for our testing.\nI use the coc-pydocstring extension for coc.nvim in vim to generate \u0026ldquo;Google Docstring\u0026rdquo;. Full details of the plugin are available at the yaegassy / coc-pydocstring repository. The PEP 257 Docstring Conventions can be found on the python pep 257 webpage.\nGetting the Project Setup For this post I\u0026rsquo;m doing a clean install. My basic setup is as follows:\n# from my projects directory # setup workspace mkdir sphinx-next-level cd sphinx-next-level #setup virtual environment python3.10 -m venv venv \u0026amp;\u0026amp; source venv/bin/activate source venv/bin/activate python3 -m pip install --upgrade pip # setup git git init # see note below git add .gitignore git commit -m\u0026quot;Add .gitignore in Initial Commit\u0026quot; For a .gitignore for python/django/jupyter notebooks visit the toptotal website.\nFor this project I\u0026rsquo;m using a requirements.txt to manage the project dependencies. The key here is the dependencies. I\u0026rsquo;ll be adding them as the project develops. At the start it looks like this.\nsphinx~=4.2.0 To install sphinx I run:\npip install -r requirements.txt We know have access to the sphinx-quickbuild command.\nsphinx-quickstart docs A quick start interactive starts up. I choose to separate source and build directories in the root path.\nAdd your project name Add your own name and email Project release 0.1.0 Project language Now is a good time to test.\ncd docs make html No errors and we\u0026rsquo;re good to go. Let\u0026rsquo;s serve the pages and have a look.\ncd build/html/ python http.server All\u0026rsquo;s working. Now\u0026rsquo;s a good time to commit. (GTTC)\nreStructuredText is one of the oldest and fully featured text markup standards. However markdown has grown in popularity and is used across many platforms. So I use markdown in Sphinx.\nHello .md Goodbye .rst I convert from .rst to markdown using rst-to-myst.\npip install rst-to-myst rst2myst convert docs/**/*.rst # convert every file under docs # It's possible to run the convert command with -R flag to # replace the .rst file as opposed to creating .md files # beside the original .rst files. But, caution. I then delete the index.rst and edit conf.py. The myst_enable_extensions enable sphinx definition lists.\nextensions = [ \u0026quot;myst_parser\u0026quot;, ] myst_enable_extensions = [ \u0026quot;deflist\u0026quot;, ] And install myst-parser.\npip install myst-parser # test cd docs/build/html/ python http.server We are up and running and our files are in markdown.\nGTTC.\nLive Reload / Auto build Running and stoping the http.server over and over is tiresome.\nSphinx has a solution for that.\npip install sphinx-autobuild This allows us to start the http server and let it run. When I make changes to the .md files it will automatically rebuild the site and refresh the browser. It\u0026rsquo;s similar to live reload in other apps. The server doesn\u0026rsquo;t update if you make changes to the .py files.\nTo start autobuild:\n# from the root of your project # command /inputDirectory /outputDirectory/ sphinx-autobuild docs/source/ docs/build/html/ Now when I modify the documentation the documentation site updates automatically.\nI then remove the lines below from conf.py. These are used for the general index, the Python module index, and a standalone search page. I don\u0026rsquo;t need them for this project.\n- {ref}`genindex` - {ref}`modindex` - {ref}`search` Include a File To include the existing README.md of your project add the following to index.md. We use the include directive. Notice the opening and closing three back-tics.```\nThese open and close the directive. {\u0026ldquo;directive name\u0026rdquo;}\n```{include} ../../README.md :relative-images: ``` Add a Warning To add a warning, we use the warning directive.\n```{warning} This site is under heavy delvelopment. ``` For a list of directives the sphinx documentation pages are the place to go.\nGTTC.\nAre we there yet? To get a readout of the duration of your build add \u0026ldquo;sphinx.ext.duration\u0026rdquo; to conf.py extensions.\nextensions = [ ... \u0026quot;sphinx.ext.duration\u0026quot;, ] Look and Feel There are a lot of great themes to choose from. The Sphinx Themes Gallery has a large selection. I\u0026rsquo;m torn between furo and documatt. It depends on the project.\nInstall the theme:\npip install furo # or pip install sphinx_documatt_theme Activate in conf.py by changing the selected theme.\nhtml_theme = \u0026quot;furo\u0026quot; # or html_theme = \u0026quot;sphinx_documatt_theme\u0026quot; GTTC.\nAdding Usage Section Create a usage.md file in the source folder.\n# Usage ## Installation Installation instructions to go here #TODO pip install \u0026lt;libraryname\u0026gt; If I build now, I will get a warning that usage.md is not in any toctree directive. Edit index.md.\n```{toctree} :caption: 'Contents:' :maxdepth: 2 usage ``` Add Relative Reference Links To add a domain independent or relative link to another document use:\nFor more information read {doc}`usage` In this example I added it to index.md\nTo add a relative reference to a specific heading in a document there is a required extension.\nIn conf.py add:\nextensions = [ ... \u0026quot;sphinx.ext.autosectionlabel\u0026quot;, ] And in our index.md:\nFor more installation instructions read {ref}`Installation` Note: The reference heading should be unique.\nGTTC.\nIntegrating Jupyter Notebooks Add the nbsphnix extension to conf.py\nextensions = [ ... \u0026quot;nbsphinx\u0026quot;, ] If you don\u0026rsquo;t have pandoc installed you will receive an error when you rebuild.\nTo install pandoc the full instructions are on the pandoc official website.\nFor me on my MacOS, I use:\nbrew install pandoc GTTC.\nDocumenting Code Manually To manually include documentation for a particular piece of code we use the {eval-rst} directive in our markdown.\n```{eval-rst} .. function:: example.get_attendee_names(kind=None) Return a list of attendees :param kind: Optional \u0026quot;kind\u0026quot; argument :type kind: list[str] or None :rtype: list[str] ``` This outputs the following:\nexample.get_attendee_names(kind=None)\nReturn a list of optional ingredients\nParameters\nkind (list_[str] or_ None) – Optional “kind” argument\nReturn type\nlist[str]\nAutomate Code Documentation Import To automatically detect and create the documentation page for our code we need to add sphinx.ext.autodoc to the extensions list in conf.py.\nextensions = [ ... \u0026quot;sphinx.ext.autodoc\u0026quot;, ] We then add a reference use autoformat to our markdown. In my case I added it to index.md.\n```{eval-rst} .. autofunction:: example.get_attendee_name ``` Every time the site documentation is built, sphinx reads the code docstring and includes it in the documentation. The documentation is automatically kept up to date with changes in the code documentation.\nI document my code and autodoc semi-automatically does the rest. But there\u0026rsquo;s a better way. Which we\u0026rsquo;ll see soon.\nLinking to the Specific Code docstring I use the {py:func} directive in my markdown to create a link to the source code documentation of a particular function.\n{py:func}`example.get_attendee_name` The {py:func} directive generates a relative link to the specific function on the documentation page. There are similar directives for classes {py:class}, modules {py:mod}, and methods {py:meth}. For a full list of cross-referencing python objects visit the sphinx documentation website.\nOk. That\u0026rsquo;s a lot.\nIt\u0026rsquo;s a good time to commit. (GTTC)\nIn the next post, I want to start answering some of my more burning questions.\nHow do I manage google docstring code comments?\nHow do I generate the docs for a complete code base?\nHow to I handle todo items in my code base docstring?\nHow do I add some flavour to my docs?\n#source\nDocument Your Scientific Project With Markdown, Sphinx, and Read the Docs | PyData Global 2021\nReadtheDocs Migrate Restructured to Markdown\nSphinx Documentation\nMarkedly Structured Test\n","date":"2022-11-03","permalink":"https://www.davidjnevin.com/code/sphinx_next_level/","tags":["sphinx","documentation","markdown","cross reference"],"title":"Sphinx in Markdown"},{"content":"Sphinx: Setup I\u0026rsquo;m interested in building a useful documentation pipeline and will use it initially on these blog posts. I\u0026rsquo;m keen to have a complete working and tunable setup by the end of the week.\nAs always I\u0026rsquo;m working in a virtual environment.\nFirst off, install sphinx\npip install -U sphinix I then update my requirements.txt file using:\npip freeze \u0026gt; requirements.txt As sphinx creates a lot of resource files, I create somewhere to put it all. I then run the quick-start.\nmkdir docs cd docs sphinx-quickstart . # note the `period` # to skip mkdir and cd we can sphinx-quickstart docs # Caution: This option gave me # permission errors on some attempts Choose your name and your projects name. For the rest it\u0026rsquo;s easier to accept the defaults. All settings can be configured later if required.\nThe quick-start builds out the scaffolding structure for sphnix. There are three basic files to concern ourselves with.\nconf.py contains all the configuration and settings information, and also allows for code executions. index.rst table of contents and typically a project description Makefile use to build, to spellcheck, to check links \u0026hellip; The Makefile is somewhat easier to use than the sphinx build.\nBuilding Docs To build the docs typically we use:\nmake clean # gets rid of anything from before, a clean slate make html # builds all docs as html (other options exist) Serve the Docs Locally To serve the docs locally use:\npython3 -m http.server The documentation is now accessible at http://localhost:8000/_build/html/index.html\nUsing Multiple Input Formats Sphinx by default uses reStructuredText . Adding the formats your team uses, reduces barriers to documentation creation and maintenance.\nMarkdown To use MarkDown and other formats we edit the conf.py file.\nFor markdown and reStructuredText only choose MySt-Parser. Full documentation can be found on the MySt website.\nFirst install the module.\npip install myst-parser Then edit the sphinx conf.py adding these lines.\nextensions = [\u0026quot;myst_parser\u0026quot;] As a test, I created helloworld.md with the following content.\n# Hello, World Punctuation **matters**! Running the make html command now will give a warning that the file is not in any toc. To avoid this, edit the toctree directive in index.rst. Mine looks like this after the edit.\n.. toctree:: :maxdepth: 2 :caption: Contents: helloworld.md n Sphinx now parses reStructuredText and markdown files.\nJupyter Notebooks For jupyter notebook parsing I chose MySt-nb.\nnote: If you have the `MySt-parser` from the previous setion installed you should uninstall it. It conflicts with the `MySt-nb` . `MySt-nb`parses both `Markdown` and `Jupyter` notebooks. Full documentation is available at the MyST NB website\nInstall\npip install myst-nb Adding an extension reference to the conf.py .\nextensions = [ \u0026quot;myst_nb\u0026quot; ] Add your notebook to a toc directive in index.rst.\nMine is now like this:\n.. toctree:: :maxdepth: 2 :caption: Contents: helloworld.md Getting_to_Know_Sphinx.ipynb If you get this error, WARNING: toctree contains reference to document DataWrangling that doesn't have a title: no link will be generated and don\u0026rsquo;t see your notebook in the navigation menu, then make the first cell in the notebook a markdown cell and choose a title. The title will be used in the menu/link generation.\nSphinx now parses reStructuredText, markdown and, jupter notebooks.\nSpell Check I chose sphinxcontrib-spelling which uses pyEnchant.\nInstall on MacOS using brew and then pip. Complete instructions are available on the pyenchant website.\nbrew update brew install enchant pip install sphinxcontrib-spelling Add the extension to conf.py .\nextensions = [ ... \u0026quot;sphinxcontrib.spelling\u0026quot; ] To change the default language add the following to conf.py.\nspelling_lang=\u0026quot;en_US\u0026quot; tokenizer_lang=\u0026quot;en_US\u0026quot; en_US is the default. A full list of language codes are available on the ISO Standards website\nTo add words that are not in the standard dictionaries provided by pyEnchant use the following setting. This can be useful for brandnames, company lingo and the like. The file should contain one\nspelling_word_list_filename=\u0026quot;spelling_wordlist.txt\u0026quot; Run the spelling test as part of the make command.\nmake spelling # Spellcheck only make html spelling # Spellcheck and build (with any # errors) I introduced a spelling mistake in my helloworld.md and got the following useful output in the terminal.\nhelloworld.md:0: : Spell check: speling: This is a deliberate speling mistake.. Writing /docs/_build/spelling/helloworld.spelling writing output... [100%] index WARNING: Found 1 misspelled words I repeated using \u0026ldquo;davidjnevin\u0026rdquo;, got a spelling warning, added it to spelling_wordlist and received no errors. So that worked.\nA full list of word filters output options are available on the sphinxcontrib.spelling website\nIt\u0026rsquo;s worth noting here that I use a spell check in my text editor. The sphinx spell check is as an additional check prior to building.\nLink Checking Link checking comes by default with sphinx\nmake linkcheck Using this link https://www.davidjnevin.com I received the following error.\n( helloworld: line 22) redirect https://www.davidjnevin.com - permanently to https://davidjnevin.com/ build succeeded. Look for any errors in the above output or in _build/linkcheck/output.txt Using this link https://davidjnevin.com/ I didn\u0026rsquo;t receive an error.\nSphinx is now up and running and usable. Next I\u0026rsquo;m exploring how to make it awesome.\n#source\nCarol Willing - Practical Sphinx - PyCon 2018\n","date":"2022-11-03","permalink":"https://www.davidjnevin.com/code/sphinx_setup/","tags":["sphinx","documentation"],"title":"Sphinx Setup"},{"content":"It\u0026rsquo;s time to start my first big personal python project. I\u0026rsquo;ve put in the hours (and hours) in tutorials, build out a few apps, some simple some more complex, contributed to open source, and joined and contributed to a variety of python related groups. I feel about as ready as I ever will be to take the leap and get my hands dirty again in a project that\u0026rsquo;s going to extend my skills.\nPart of this journey will be getting good at documentation. I\u0026rsquo;ll be using a docs as code approach.\nDocs as Code Docs as code is the practice of applying software development techniques to writing documents.\nThe rules to follow are: I store doc source files in a version-control system.\nI build the doc artifacts automatically.\nI ensure that a trusted set of reviewers reviews the docs.\nI publish the artifacts without much human intervention.\nAdded: I use a documentation CI/CD pipeline.*\nSuggestions for Great Documents Start with What the Reader Needs The documentation assists the reader in achieving a goal. Understanding the needs of the reader is vital to writing good documentation.\nWrite Less Prune existing documentation. Focus on what will assist the reader achieve their goals and nothing else. The best way to avoid documentation rot it to focus it on the needs. The documentation must evolve.\nWrite the Outline First Avoid blank page writer\u0026rsquo;s block by starting with an outline. Structured documentation is easy to search, read, and maintain. Topic based writing focuses the content and helps the author write concise and less text.\nRubber Duck Test your Documentation Explain how the reader can achieve their goal in a friendly and conversational way. Read it out loud to check if it sounds good and reads well.\nWrite Readably The documentation has to score high for readability.\nIt has to be structured. The document must have headings and sections. The headings should enable quick searching of the document and help readers identify the paragraphs of use to them. Code must be formatted. Do this then that instructions must be presented as lists. Paragraphs must be short, and sentences should not be longer than 25 to 30 words. Tell the reader what to do. Be direct. Automating the Documentation Workflow A robust documentation CI/CD pipeline is required to automate and standardise, and speed up documentation workflow.\nThe documentation pipeline should be both robust and flexible to be reused with minimal changes to work across multiple projects.\nLinters will be used to check docstring formatting for API\u0026rsquo;s. #TODO-RESEARCH\nLinters will automatically check and warn spellchecking, sentence length, paragraph length, equality checking and stop word exclusion. Linters will be include in the makefile and possibly in precommit. #TODO-RESEARCH\nI have used MkDocs and will investigate Sphinx as the documentation generation tool for my projects.\nDocumentation will be traceable.\nDocumentation will be linked to documentation sources. Version control will give information about authorship and reasons behind changes. Documentation versioning will follow Semantic Versioning 2.0.0 Style Guidelines Standard language conventions will be used in accordance to PEP 257. Any project specific standards will be codified. Docstring style will follow google style docstrings. All chosen documentation tools will be defined and links to their documentation will be provided. Measurability The generation of documentation will be in response to issues generated in GitHub.\nI will explore unit testing of code examples if and when it is necessary to include code samples. For more information, see Ben Perlmutter talk Unit test the Docs: Why You Should Test Your Code Examples (Write the Docs Portland 2022) The talk references a markup processor for extracting code and making it into examples. #TODO-RESEARCH\nMaintenance A preview of the documentation will be available for checking before the documentation is submitted.\nPre-commit checks and pre-pull request checks will reduce potential errors getting to the final repository.\nA future system would include the ability for the readers to provide feedback in an easy way to better maintain the usefulness of the documentation.\n#source\nMarcia Riefer Johnston \u0026amp; Dave May - One AWS team’s move to docs as code\nWriting effective documentation | Beth Aitman\nEmilia Juda Özbay - Maintaining Documentation: Make It Easy!\n","date":"2022-11-01","permalink":"https://www.davidjnevin.com/code/documentation_intentions/","tags":["documentation","guidelines","readability"],"title":"Documentation: Intentions"},{"content":"What is Docker? \u0026ldquo;Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications.\u0026rdquo; ~ Docker Docs\nWhat is an image? An image is a read-only template of instructions for creating a Docker container. Images usually contain other images with customisation. Images can be customised and configured using a dockerfile.\nWhat is a Container? A container is a runnable instance of an image. It can be started, stopped, restarted, moved, or deleted.\nStart / Stop / Restart Note: Usually the first 3/4 characters of the ID is enough to identify the image.\ndocker start \u0026lt;ID\u0026gt; docker stop \u0026lt;ID\u0026gt; docker restart \u0026lt;ID\u0026gt; Remove all images docker images -q docker rmi $(docker images -q) Remove all containers docker ps -q # list all the container IDs docker rmi $(docker ps -a -q) # remove all containers Dockerfile Options FROM Determines the image source which the resulting image will be created FROM.\nFor example to create a linux machine image:\nFROM httpd:alpine AS base # `AS` is used to give a name for # later use if required. COPY Copies the contents into the image. Wildcards and location specifications can be used. COPY creates a new layer.\nCOPY /\u0026lt;source_directory/ /destination_directory/ COPY *.png /images/ COPY --from=\u0026lt;imageAlias\u0026gt; /usr/local/apache2/htdocs/ /app/ # The --from flag allows us to copy from one image to another WORKDIR This sets the working directory inside the container. It sets a path to be used as a starting point. If the path doesn\u0026rsquo;t exist, WORKDIR will create the path. All relative paths from this point will be inside the WORKDIR\nWORKDIR /usr/local/apache2/htdocs/ ENV ENV allows for setting environment variables in the dockerfile using a key value.\nENV DIRPATH /usr/local/apache2 ... WORKDIR $DIRPATH/htdocs/ EXPOSE This is just documentation. It doesn\u0026rsquo;t do anything. It doesn\u0026rsquo;t publish, it informs the container user of the ports that the image intends to use. It can be overridden by the docker run -p flag.\nEXPOSE 80 RUN RUN, runs a one-off command on the image. It creates a new layer in the image.\nRUN \u0026lt;somecommand\u0026gt; VOLUME Creates a file location in the container that lives outside the container on your machine. This provides a persistent storage independent of the image.\nFROM ubuntu RUN mkdir /myvol RUN echo \u0026quot;hello world\u0026quot; \u0026gt; /mvol/greeting VOLUME /myvol The location of the column on the local machine can be configured under the docker run cli command.\nENTRYPOINT The entry point specifies that we are going to run something when the container starts.\nENTRYPOINT [ \u0026quot;/app/entrypoint.sh\u0026quot;] # start this shell file CMD [ \u0026quot;server\u0026quot; ] # The argument to be passed to the # entrypoint, can be overridden from the # docker run command. ","date":"2022-10-30","permalink":"https://www.davidjnevin.com/code/docker_first_look/","tags":["docker"],"title":"Docker First Look"},{"content":" MkDocs Getting Started MKDocs is a documentation oriented static website builder using a single .yml config file. Documents are written in Markdown. Sounds great.\nInstallation For full instructions see https://www.mkdocs.org/getting-started/\nFor my MacOS:\nVirtual environment: Git initialised with a remote repo. With Basic .gitignore pip install mkdocs pip install mkdocs-build-plantuml-plugin pip freeze \u0026gt; requirements.txt ... git push MkDocs is installed here with the plantUML plugin.\nCreate a Project mkdocs new \u0026lt;project-name\u0026gt; cd \u0026lt;project-name\u0026gt; Run the Server To run the built-in mkDocs server at 127.0.0.1:8000\nmkdocs serve Create Menu Items All configuration is carried out in mkdocs.yml unless otherwise stated.\nnav: - Home: index.md - About: about.md Add a Theme There are many to choose from. I choose material. Full instructions can be found here.\npip install mkdocs-material And in the config file:\ntheme: material This appears to be a very complete theme with settings galore.\nAdd Favicon Create an assets/images/ folder inside your project folder. Include a favicon.ico file.\ntheme: favicion: /assets/images/favicon.ico Build the Site To generate the static html site, run:\nmakedocs build PlantUML See MkDocs-Build-Plantuml-Plugin for full details.\nThe documentation is really clear, although I may return to record here my experiences in the future as the possibilities of fine-tuning a solution are complex.\n","date":"2022-10-27","permalink":"https://www.davidjnevin.com/code/mkdocs_first_look/","tags":["documentation","mkDocs","charts","plantUML"],"title":"Mkdocs: First Look"},{"content":"Rewriting History Golden Rule: Don\u0026rsquo;t rewrite public history.\nTo undo local commits, use:\n# Undoing comiits git reset --soft # Removes the commit only git reset --mixed # Removes commit and unstages files git reset --hard # removes commit, unstages changes, discards local changes # to undo the last commit git reset --hard HEAD~1 # hard revert to commit previous to current head position, i.e undo last commit. git reset --(option) HEAD~3..HEAD # reverts the commits between the 4th last and the head. Any similar combination of start..stop settings can be used. To undo/change shared/published commits, use:\ngit revert \u0026lt;commitRef\u0026gt; # Reverts a specific commit git revert HEAD~3..HEAD # TReverts the last three commits git revert HEAD~3.. # HEAD is the default end and can be left out git revert --no-commit HEAD~3.. # Doesn't make a seperate commit for each revert and instad the are combined git revert --abort # to cancel the revert git revert --continue # to commit the revert Recover lost Commits In case you accidentally removed some commits.\ngit reflog git reset --hard HEAD@{X} # where X is the number of the head pointer you wish to recover. To see the history of other commit pointers, use:\ngit reflog show \u0026lt;branchName\u0026gt; # show history of \u0026lt;branchName\u0026gt; pointer. Amending the Last Commit If you\u0026rsquo;ve committed and then realised there\u0026rsquo;s a typo, we shouldn\u0026rsquo;t do another commit. Instead we should amend that last commit.\nWe correct our typo, git add it and then:\ngit commit --amend # We can add a new message or leave blank and accept the orginal message from the previous commit. If we want to include a file in the last commit. We make our changes, then add the file to the staging area and then commit using:\ngit commit --amend If we want to remove a file form the last commit:\ngit reset --mixed HEAD~! git status -s git clean -fd # remove untracked files from working directory git add . git commit -m \u0026quot;New commit messages\u0026quot; Amend an Earlier Commit We are going to use interactive rebasing. Identify the parent commit reference to where you wish to start the rebase.\nThe begin interactive rebasing.\ngit rebase -i \u0026lt;parentCommitref\u0026gt; Edit the rebase plan. Select the key word of the commit you wish to change and replace them with the appropriate keyword from the included documentation. Make the changes and add, and commit them.\nIf you mess up:\ngit rebase --abort If you\u0026rsquo;re happy with the changes:\ngit rebase --continue # look at the logs to see the changes. Dropping Commits To remove or drop commits we use:\ngit rebase -i \u0026lt;commitRefOfParent\u0026gt; # We can use the parent refence, the refernce it self with ^ or the refernce ~1. git rebase -i oiu76532^ git rebase -i oiu76532~1 In the rebase window, remove the reference to the commit we wish to drop. Save. This may generate conflicts. Use\ngit mergetool to resolve commits.\ngit rebase --continue # If you screw up, git rebase --abort takes us back to the state before we started. Rewording Commit Messages To reword we use\ngit rebase -i \u0026lt;parentRefernce\u0026gt; Edit the rebase window to replace pick with reword. (Do not change the commit messages here). After saving, git will run through the list of commits, pause, and allow us to edit the commit messages for the commits we selected for rewording.\nReordering Commits git rebase -i \u0026lt;parentRefernce\u0026gt; # of oldest commit to reorder. In the rebase window reorder the commits. In order to avoid multiple and difficult merge conflicts, try reordering on commit at a time.\nSquashing Commits To combine related batches of work, logically parts of the same unit of work.\ngit rebase -i \u0026lt;parentRef\u0026gt; Edit the rebase window to replace pick with squash. After saving, git will run through the list of commits, pause, and allow us to edit the commit messages for the combined/squashed commit. Edit as required and save.\nTo avoid editing the commit messages, we can instead choose to ignore the commit messages of some commits using fixup in place of squash.\nSplit a Commit To separate into multiple commits a previous commit that contains more than one logical units of change.\ngit rebase -i \u0026lt;parentRef\u0026gt; In the rebase window we change the keyword from pick to edit on the commit we wish to split. Save.\nThe HEAD is now at the commit, and we can reset and make changes here.\ngit rebase -i \u0026lt;parentRef\u0026gt; # pick -\u0026gt; edit. The save git reset --soft Head~1 # the changes will remain as staged # or git reset --mixed Head~1 # the changes will be in the working # directory Make the appropriate commits reflecting logical units of change and once we\u0026rsquo;re done.\ngit rebase --continue ","date":"2022-10-26","permalink":"https://www.davidjnevin.com/code/git_exploration_four/","tags":["git","developer","skills"],"title":"Git Exploration: Part Four"},{"content":"Cloning a branch from GitHub To clone, or make a local copy of a repository, use:\ngit clone \u0026lt;repo_url/https/ssh/\u0026gt; git remote # to see remote origins git remote -v # more deaitls, verbose. Fetching from remote To update our local copy of the remote repository use:\ngit fetch origin \u0026lt;branchname\u0026gt; # to fetch a specific branch git fetch origin # to get all new commits on all branches git fetch # git asumes the \u0026quot;origin\u0026quot; keyword git branch -vv # very verbose details on the brnach and it's # relation to the origin. Note: The fetched are not yet committed to the local repo.\n# merge from the local version of the branch git merge origin/\u0026lt;branchname\u0026gt; Pulling from Remote When we use fetch we also need to use merge. Pull is fetch and merge. But there are options, a pull, fetch and three-way merge or a pull \u0026ndash;rebase, a fetch plus rebase.\n# three-way merge git pull # if your gitconfig default is set to --no-rebase # equivalent to git pull --no-rebase # to force a rebase merge git pull --rebase # defaults can be set git config pull.rebase false # merge git config pull.rebase true # rebase git config pull.ff only # fast-forward only # replace git config with git config --global to set as default Push a commit To push or update the remote branch with local commits we use:\ngit push \u0026lt;remoteRepository\u0026gt; \u0026lt;branchName\u0026gt; # git assumes brnachName to be the current branch git push \u0026lt;remoteRepository\u0026gt; # git assumes \u0026lt;remoteRepository as origin so we can write git push # to push the local commits on the current branch to origin. Share and Delete a Tag To share a local tag on a commit to a remote repository:\n# create the tag git tag \u0026lt;tagName\u0026gt; # tags the current commit git tag \u0026lt;tagName\u0026gt; \u0026lt;commit ref\u0026gt; # tags the particular commit # to share the tag to the remote repository git push origin \u0026lt;tagName\u0026gt; # To delete a remote tag git push origin --delete \u0026lt;tagName\u0026gt; # To delete tag locally (as above in Tagging section) git tag -d \u0026lt;tagName\u0026gt; Releases Releases are a high level feature built on top of tags. (in Github)\nhttps://docs.github.com/en/repositories/releasing-projects-on-github/about-releases\nSharing Branches To share our local branches:\ngit branch -vv # show local branches, and the remote associated branch if it exists git branch -r # show the remote branches git -u origin \u0026lt;branchName\u0026gt; # for first push # the branch can now be used as a normal linked branch like our main. git push -d origin \u0026lt;branchName\u0026gt; # delete the remote branch # however if we look at git branch -r # we see our local branch is still linked with a remote branch marked 'gone' git branch -d \u0026lt;branchName\u0026gt; # delete the local branch Collaborating To pull a remote branch and work on it locally:\ngit fetch git branch -r # display remote branches git switch -c \u0026lt;localBranchName\u0026gt; origin/\u0026lt;remoteBranchName\u0026gt; # this creates and links the new branch to the newly fetched remote branch To remove a remote branch that no longer exists remotely but the link to it does locally:\ngit branch -d \u0026lt;localBranchName\u0026gt; # delete local version git remote prune origin # delete remote link # delete Work on Open Source Read and follow the instructions for contributing provided by the repository owner(s).\nFork on Github and clone your fork locally. Create a new branch locally. Push changes to your fork and from there create a pull request. Keeping Fork Updated In order to keep our fork up-to-date with the original repository we can add a link between to our local copy of the forked repository and the original repository. We can then push updates to our fork for local.\ngit remote -v #show details of remote repositories git remote add \u0026lt;nameOfBaseOrUpstreamRemoteLink\u0026gt; # usually base or upstream git remote -v # confirm the new remote connections # to rename remote repository git remote rename upstream base # change name from upstream to base git remote rm \u0026lt;remotename\u0026gt; # Remove the remote link git fetch upstream # fetch latest commits from upstream remote git log .... # If the local is not in snyc with the upstream git switch main # switch to local main git merge upstream/main main # push any changes to the forked repository git push # It's always good to build you changes on the most recent version of the main # branch. git switch \u0026lt;featBranchName\u0026gt; git merge main ","date":"2022-10-23","permalink":"https://www.davidjnevin.com/code/git_exploration_three/","tags":["git","learning","collaborating"],"title":"Git Exploration: Part Three"},{"content":"Branching Branching allows us to diverge from the the primary line of work and work in isolation.\ngit branch \u0026lt;newbranchname\u0026gt; # create a branch git branch # list all branches git switch \u0026lt;newbranchname\u0026gt; # switch to \u0026lt;newbranchname\u0026gt; git switch -C \u0026lt;newbranchname\u0026gt; # Creates and switches to that branch Rename a branch\ngit branch -m oldname newname See conventions of best practices for naming branches.\nDelete a branch\ngit switch \u0026lt;primarybranch, usually main\u0026gt; git branch -d \u0026lt;branchname to delete\u0026gt; # if the branch is not merged you will get an error. git branch -D \u0026lt;branchname to delete\u0026gt; # this will delete an unmerged branch and your changes will be lost. Compare branches\n# from main git log main..\u0026lt;branchtocompare\u0026gt; # see details of commit git log --oneline --patch main..\u0026lt;branchtocompare\u0026gt; # see actual changes git log --oneline --stat main..\u0026lt;branchtocompare\u0026gt; # see stats for changes See differences\ngit diff main..\u0026lt;branchtocompare\u0026gt; git diff \u0026lt;branchtocompare\u0026gt; # shorter form to compare to current branch git diff --name-only \u0026lt;branchtocompare\u0026gt; # show name git diff --name-status \u0026lt;branchtocompare\u0026gt; # show name and status Stashing changes If we need to change form a branch but aren\u0026rsquo;t yet ready to commit the changes made, we use stash.\ngit stash push -m \u0026quot;Useful message\u0026quot; New files that are not tracked will not be included in the stash.\ngit stash pull --all (-a) -m \u0026quot;Meaningful message\u0026quot; Viewing Stashes\ngit stash list git stash show stash@{X} # x being the numberical reference to the stash git stash show X # x being the numberical reference to the stash Apply Stash\nWhen we are ready to continue to work on our stashed files use:\ngit stash apply X # x being the numberical reference to the stash Cleaning up Stashes\ngit stash drop X # x being the numberical reference to the stash, drop a single stash@{X} git stash clear # clears all stashes Merging Branches If there exists a direct liner non-divergent path between the branch and the main branch git carries out a fast forward merge.\n# Note: It's always a good idea to use the --graph flag. git log --oneline --all --graph # from main git merge \u0026lt;secondarybranch\u0026gt; If the main branch has received additional commits (has diverged) after the second branch was created, git carries out a three-way merge or a merge-commit.\n# from main git merge --no-ff \u0026lt;secondarybrancj\u0026gt; # no fast forward mode To disable fast-forward merges\ngit config ff no # disabled for this repository git config --global ff no # disabled by default (not working in my version of git) # possible alternative # in git config file mergeoptions = --no-commit --no-ff Worth reading before adding to your global settings. https://stackoverflow.com/questions/2850369/why-does-git-perform-fast-forward-merges-by-default/2850413#2850413 and https://stackoverflow.com/questions/2100829/when-should-you-branch/2107672#2107672 and http://sip-router.org/wiki/git/gitconfig\nViewing Merged and Unmerged Branches To view the merged branches:\ngit branch --merged It\u0026rsquo;s good practice to delete branches once they are merged.\nTo view unmerged branches:\ngit branch --no-merged Merge Conflicts When there are conflicting branches.\n# from the branch you want to merge to (usually main) git merge \u0026lt;featbranchname\u0026gt; # This will result in a merge error git mergetool # The files can be editted by hand (don't forget to rmove the markers ) # my gitconfig uses vimdiff3 git add \u0026lt;filenames\u0026gt; git commit # (default message will be the default message) Aborting a Merge Maybe now isn\u0026rsquo;t the time to resolve these conflicts.\ngit merge --abort # returns us to the state before the merge. Undoing a Faulty Merge We could do a history rewrite a to remove the commit we can use reset, or if you want a complete history, we can do a revert. This is recommended only if you haven\u0026rsquo;t shared your history.\ngit reset --hard HEAD~1 # lose local changes git reset --soft HEAD~1 # keep local changes For a complete history, or in a shared repositories, it\u0026rsquo;s recommended to use revert.\ngit revert -m 1 HEAD # m=message and 1=the first parent of the branch Squash Merging If it isn\u0026rsquo;t necessary to record the branch to be merged, history, then we can use squash merging. (Maybe there are many commits, or they are low quality or they were used for a quick bug fix or the like.) We would prefer to combine them into a single commit before merging with the main branch. Ideally is is used for small short lived branches with bad history.\ngit merge --squash \u0026lt;ShortLivedBranchName\u0026gt; git add \u0026lt;files\u0026gt; git commit -m\u0026quot;Meaningful message\u0026quot; git branch -D \u0026lt;ShortLivedBranchName\u0026gt; # forces the deletion of the short lived branch. -D is needed because the branch does not appear as merged, due to the git --squash Rebasing To keep a cleaner history for divergent branches we can use rebasing. This rewrites the history. It\u0026rsquo;s recommended to use only on the local repository. This is irreversible. We are creating new commits. Any branches from the secondary branch would have their history messed up if the secondary branch is rebased.\n# on the secondary branch git rebase main git swtich main git merge \u0026lt;SecondaryBranchName\u0026gt; # if there are conflicts then use merge tool to resolve the conflicts # options include git mergetool # decide how you are going to combine the changes git rebase --continue ... git --abort # to cancel the rebase and return to the previous state before rebasing. # don't forget to remove the automatically generated backup file. # to avoid the creation of a backup file git config --global mergetool.keepBackup false Vimdiff3 Mergetool :diffg RE # get from remote :diffg LO # get from local :diffg BA # get from base Cherry Picking Instead of merging a complete branch of multiple commits, we can also cherry pick a commit.\n#from the target branch git cherry-pick \u0026lt;commitReference\u0026gt; # includes commit git cherry-pick \u0026lt;commitReference\u0026gt; -n # no commit Cherry Picking a single file To cherry pick the most recent version of a file from a specific branch into another branch (main in the example) use:\ngit restore --source=\u0026lt;secondaryBranch\u0026gt; -- \u0026lt;filename\u0026gt; # The latest version of the file from the secondary branch is now in the working directory of the primary branch and can be added and commit as usual. Recover a Deleted Branch If like me you decided to use an git alias to delete unmerged branches, but did it form a feature branch. You main branch has now been deleted too. Don\u0026rsquo;t panic.\nIf you\u0026rsquo;ve just deleted the branch you\u0026rsquo;ll see something like this in your terminal Deleted branch \u0026lt;your-branch\u0026gt; (was \u0026lt;sha\u0026gt;). Then just use that \u0026lt;sha\u0026gt; in this one-liner:\ngit checkout -b \u0026lt;your-branch\u0026gt; \u0026lt;sha\u0026gt; source: https://stackoverflow.com/questions/3640764/can-i-recover-a-branch-after-its-deletion-in-git\n","date":"2022-10-22","permalink":"https://www.davidjnevin.com/code/git_exploration_two/","tags":["git","learning","branch"],"title":"Git Exploration: Part Two"},{"content":"Git Tutorial Notes Track history and work together. Distributed version control system.\nWhy command line:\nAll commands are supported Command line is always* available Git Config git config --help git config --global user.name \u0026quot;David Nevin\u0026quot; git config --global user.email david@......com git config --global core.autocrlf input (for macOS of Linux) Git Workflow git add \u0026lt;file\u0026gt; git commit (-m\u0026quot;short message) Commit without adding first (not recommended)\ngit commit -a Commit often and keep the commits small. Write meaningful commit messages.\nIf applied, this commit will your subject line here.\nAn “atomic” change revolves around one task or one fix.\nSeven rules for a great commit. https://cbea.ms/git-commit/\nThe seven rules of a great Git commit message Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Do not end the subject line with a period Use the imperative mood in the subject line Wrap the body at 72 characters Use the body to explain what and why vs. how Delete File Deleted and commit the deletion directly.\ngit rm \u0026lt;file\u0026gt; Rename File Rename and commit rename directly.\ngit mv \u0026lt;old_filename\u0026gt; \u0026lt;new_filename\u0026gt; Staging Area List files in staging area.\ngit ls-files Remove empty folder or file form staging area.\ngit rm --cached \u0026lt;filename or foldername\u0026gt; # don't forget the --cached or the file will be deleted! Remove an entire directory from the staging area.\ngit rm --cached -r \u0026lt;foldername\u0026gt; # -r applies deletion recursively Git Short Status Get a concise status. Only shows the files affected.\ngit status -s Git diff See the changes on a line by line basis, can be difficult on the command line.\ngit diff --staged diff --git a/hello.txt b/hello.txt # a/old file b/new file new file mode 100644 # mode index 0000000..94954ab --- /dev/null # no old copy (new file mode) +++ b/hello.txt # additions to b/newfile @@ -0,0 +1,2 @@ # - old file, (start,end of lines extracted), + new file 1,2 (start,end of lines extracted) +hello # details the changes +world To use vim as the diff tool use the following command.\ngit config --global diff.tool vimdiff Git History To see the history or logs of our commit use:\ngit log git log --oneline git log --oneline --reverse Viewing Commits To see the change made in a particular commit use:\ngit log --oneline git show HEAD git show as009s # uning commit ref. git show HEAD~3 # third before HEAD Unstaging Files To remove changes from the staging area. We want to undo the add operation.\ngit restore --staged \u0026lt;filename\u0026gt; Git Log To inspect the logs use:\ngit log --oneline --stat # show stats of oneline log git log --stat # show stats of full log git log --online --patch # show the actual changes in each Git Log Filtering git log --oneline -3 # last 3 commits git log --oneline --author=\u0026quot;Name\u0026quot; # Commited authoured by Name git log --oneline --after=\u0026quot;YYYY-MM-DD\u0026quot; # commits after the specified date git log --oneline --before=\u0026quot;YYYY-MM-DD\u0026quot; # commits before the specified date git log --oneline --after=\u0026quot;One week ago / yesterday / today\u0026quot; # can use relative terms git log --oneline --grep=\u0026quot;GUI\u0026quot; # search in commits for the phrase \u0026quot;GUI\u0026quot; (see sensitive) git log --onleline -S\u0026quot;hello()\u0026quot; # search the contents of the changes for hello() git log --onleline -S\u0026quot;hello()\u0026quot; --patch # search the contents of the changes for hello() with details of the changes git log --oneline 91f7...36cd6 # using commit references from....to (no need for full commit ref, just enough not to be ambiguous) git log --oneline \u0026lt;filename\u0026gt; # related to a particular file git log --online -- \u0026lt;filename\u0026gt; # if the filename is ambiguous or causes confusion. git log --online --patch -- \u0026lt;filename\u0026gt; # for details of above command Git Log Formatting git log --pretty=format:\u0026quot;%an committed %h on %cd\u0026quot; # displays (authorname) committed (abbreviated hash) on (date) git log --pretty=format:\u0026quot;%Cgreen%an%Creset committed %h on %cd\u0026quot; # displays ChangeColorToGreen(authorname)ResetColor committed (abbreviated hash) on (date)\u0026quot; Viewing a commit To see the files changed in a particular commit.\ngit show HEAD~2 --name-only # shows the files changed in the second to last commit git show HEAD~2 --name-status # shows the files changed in the second to last commit git show HEAD~2:full/path/to/file/filemane #shows the changes made to that file in the second to last commit Viewing Changes Across Commits To view the commits across a number of distinct commits:\ngit diff HEAD~2 HEAD # changes between the second to last commit and the current head git diff HEAD~2 HEAD \u0026lt;filename\u0026gt; # changes between the second to last commit and the current head of \u0026lt;filename\u0026gt; git diff HEAD~2 HEAD --name-only # changes between the second to last commit and the current head listing the files git diff HEAD~2 HEAD --name-status # changes between the second to last commit and the current head of \u0026lt;filename\u0026gt; and status Checkout an Earlier Commit To set the working directory to exactly how it was at that commit:\ngit checkout \u0026lt;commit reference\u0026gt; # Just to look around, not make changes git checkout master # to get back to the branch and exit the commit. Finding Bugs using Git Bisect Know a good commit start point and the commit which we consider bad, ie. the bug is present. Git bisect is a manual binary search. At each point we run or tests and if the biscet is good or bad, i.e., the bug is not present or not, we define the biscet at this point to be good or bad. This continues until we narrow down the search to a single commit. We can then exit bisect.\ngit bisect start git bisect bad # set the current location of the HEAD as the bad commit git bisect good \u0026lt;good commit ref\u0026gt; # the start of our search # continue to mark as good or bad each commit as presented, until there is only one left. git bisect reset # to exit bisect and return to the commit you were on before starting biscet. Finding Contributors using Shortlog git shortlog # Shows commit messages sorted by Author git shortlog -n # Order by the number of commits git shortlog -s # supress summary, only shows author git shortlog -e # show the email address of each author git shortlog --before=\u0026quot;\u0026quot; --after=\u0026quot;\u0026quot; # for a given data range Viewing History of File git log (--online --all) \u0026lt;filename\u0026gt; git log --stat \u0026lt;filename\u0026gt; git log --patch \u0026lt;filename\u0026gt; Restoring a Deleted File If we have accidentally deleted a file and committed the deletion, we can restore the file using:\ngit log --online -- \u0026lt;filename\u0026gt; # note extra -- and space before filename to avoid ambiguous command. # we identify the parent commit, i.e. the commit before the deletion. git checkout \u0026lt;commit parent ref\u0026gt; \u0026lt;path to file\u0026gt; # Then commit the file. git commit -m \u0026quot;Relevent message\u0026quot; Finding the Author using Blame git blame \u0026lt;filename\u0026gt; # show author for file git blame -e \u0026lt;filename\u0026gt; # dislay author email git blame -e -L 1,3 # limit output to the first three lines Tagging To bookmark a commit, for example a version change, we can use tagging.\ngit tag v2.1.0 \u0026lt;commit ref, i.e. 5e78...\u0026gt; # creates a lightweigh tag, if not commit refernce is added, the current commit is tagged. Once added we can reference this commit using the tag, e.g. checkout.\ngit checkout v2.1.0 Then to list all tags use:\ngit tag Annotate tag:\ngit tag v.2.1.1 \u0026lt;commit ref, i.e. 5e78...\u0026gt; -a -m \u0026quot;Meaningful message\u0026quot; # Using an annotated tag we can add a message to the tag. To list all tags with messages:\ngit tag -n # lightweight tags will take the commit message as their message, whereas annotated tags will display the message applied to them To delete a tag use:\ngit tag -d \u0026lt;tagname\u0026gt; initial source:\nhttps://www.youtube.com/watch?v=8JJ101D3knE\n","date":"2022-10-21","permalink":"https://www.davidjnevin.com/code/git_exploration_one/","tags":["git","notes","learning"],"title":"Git Exploration: Part One"},{"content":"One thing I have learned it that note taking only works if you take good notes.\nIn order to prepare I think it\u0026rsquo;s useful to think about what you are going to be learning.\nFor example, if it\u0026rsquo;s a process, let\u0026rsquo;s say updating your fork of the project from your CLI, or locally testing, committing, pushing and creating a pull request, it\u0026rsquo;s useful to have a clean, efficient way to record the steps. Pen and paper works for me.\nCapturing the process in clear steps is invaluable, both for me to learn and to reduce the need for my coding mentor to repeat the same instructions over and over.\nIt\u0026rsquo;s a little about creating your own personalized documentation as you go.\nToday I\u0026rsquo;m transcribing my frantic scribbles and supplementing them with some research.\nSimple example of something valuable: I should stop using git add . as my default behavior as it\u0026rsquo;s better practice to explicitly select the file or files or directory to commit as my default practice.\nSecond surprising takeaway: See where your at in git. git log --online --all --graph and using \u0026lt;C-r\u0026gt; to search bash command history.\nOkay, so I\u0026rsquo;m off to write up and clarify some notes, then play with my git config file. I\u0026rsquo;m looking to implement this:\n[alias] gone = ! \u0026quot;git fetch -p \u0026amp;\u0026amp; git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \\\u0026quot;[gone]\\\u0026quot; {print $1}' | xargs -r git branch -D\u0026quot; # To delete remote deleted branch in local ","date":"2022-10-16","permalink":"https://www.davidjnevin.com/code/pair_programming_first_steps/","tags":["pair","git","notes"],"title":"Pair Programming: First Steps"},{"content":"Django 4 by Example by Antonio Mele is a great book. I\u0026rsquo;ve been working through the projects. They are clearly laid out, the instructions are step by step and clear and the tone is friendly without being cold or patronizing.\nSo far I\u0026rsquo;ve worked through the ninth chapter. The latest project is a fairly complete online shop. I won\u0026rsquo;t go into the details here, but I\u0026rsquo;ve worked with custom model managers, QuerySets and to top it off full Stripe integration, with asynchronous tasks handled by Celery, managed by RabbitMQ with a shout out to Flower to monitor the tasks. There\u0026rsquo;s PDF and CSV generation tools in a custom admin panel for staff embers. Really complete, and so enjoyable to code up and get working on my local machine.\nI took a wander down the Docker road to see what it might take to get these solutions up and running on my current host Render.com and so far I haven\u0026rsquo;t found the complete solution. I run a PostgreSQL instance on Render but am considering moving it to AWS or Google Cloud to get some experience with those.\nWe\u0026rsquo;ll see. As per my last post, I did get the poetry project up and running on Render.com. It was a mixture of settings, inexperience on my part and they had some problems with displaying error messages. At present there are two projects up there at https://blog-django-demo.onrender.com and https://listings.onrender.com. The listings app was built in Educative.io learning path, before I discovered Django 4 by Example. It\u0026rsquo;s basic.\nAs for the blog demo, it\u0026rsquo;s packed with features, I wrote skimpy blogs around each feature and used them to fill out some content for the full text search.\nI haven\u0026rsquo;t gotten the next two projects from Django4 live as they are too complicated for my current understanding of Docker. Once I get a handle on it, (I think the last chapter of the book will cover this in depth), I\u0026rsquo;ll swing back and get them online.\nWith all the projects built, I feel I\u0026rsquo;ll have the tools at hand and the practice to start the new and improved critique wheel.\n","date":"2022-10-09","permalink":"https://www.davidjnevin.com/code/django_in_depth/","tags":["Django","blog","celery","render","docker"],"title":"Django in Depth"},{"content":"time 01.05am\nSome notes on the process as I\u0026rsquo;m working through it.\nWhy? I have a Django with PostgreSQL app that I want to add to Render.com.\nI worked with poetry on a previous app listings.onrender.com and the poetry setup worked well, once I got the hang of it.\nHaving searched I found the following on SO here.\ncat requirements.txt | xargs -I % sh -c 'poetry add \u0026quot;%\u0026quot;' The idea here is to generate the dependencies and port them to poetry. Let\u0026rsquo;s see.\nFirst the requirements.txt.\npip freeze \u0026gt; requirements.txt Okay, that exported some, but I can tell there\u0026rsquo;s a few missing. Seems like this file is something that is supposed to be manually maintained. Who knew?\nSo next step is to look at dephell\nFeels like a potential rabbit hole.\nSo what\u0026rsquo;s the easiest, fastest way\u0026hellip;\nStart a new project, copy over the files from my existing project. And run poetry install on the list of dependencies I have? And see if it works.\nOK. Let\u0026rsquo;s try that. Time 01.20am.\nThat worked. 21 minutes. Rabbit hole avoided.\nThe app is now running happily on PostgreSQL in a poetry environment. Now to create the render.yaml and build.sh files.\nOkay, deploying failures. It\u0026rsquo;s late more tomorrow. Time 2.39am\n","date":"2022-09-25","permalink":"https://www.davidjnevin.com/code/pipenv_to_poetry/","tags":["Django","Deploy","Render.com"],"title":"Pipenv to Poetry"},{"content":"The user functionality is created in a seperate app. This project uses built-in user functionality to keep things managable for my first attempts.\nCreate a new app As in the previous section a new app is created using the startapp command, in this case the app name is users.\npython manage.py startapp users To complete the app creation process we create the following files and folders.\nurls.py, forms.py and a folder registration, inside a folder named templates.\nInside the registration folder we create two html files, register.html and login.html.\nAll of these files and folders are created inside the users folder.\nThe registration folder is specifically required with the use of the django built-in system for authentication.\nRegister the new app The new app needs to be registered in the project settings.py\n... INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'listings_app', 'users' ] ... And the path to the app nees to be added to the the project urls.py file.\nfrom django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('listings.urls')), path('users/', include('users.urls')), ] Login page Since this project uses the bulit-in django authentication system, the users urls.py file uses the django.contrib.auth package.\nfrom django.urls import path, include from .import views app_name = 'users' urlpatterns = [ path('', include('django.contrib.auth.urls')), ] A login view is provided by the built-in system.\nLogin template The login template is a simple form and redirects to the homepage upon completion.\n{% extends \u0026quot;listings/base.html\u0026quot; %} {% block content %} \u0026lt;h1 class=\u0026quot;text-center\u0026quot;\u0026gt;Login\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026quot;POST\u0026quot; action=\u0026quot;{% url 'users:login' %}\u0026quot;\u0026gt; {% csrf_token %} {{ form.as_p}} \u0026lt;button name=\u0026quot;submit\u0026quot; class=\u0026quot;btn\u0026quot;\u0026gt;Log in\u0026lt;/button\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;next\u0026quot; value=\u0026quot;{% url 'listings:index' %}\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt; {% endblock content %} It is possible to create a non-standard logout page, by adding a log_out path to the users urls.py page. This will call the views.py log_out function as opposed to the built in. In this way we can set the desired redirect path after logout.\nurls.py\n... path('log_out/', views.log_out, name='log_out'), ... And the function in the app\u0026rsquo;s views.py.\nfrom django.shortcuts import render, redirect from django.contrib.auth import logout def log_out(request): logout(request) return redirect('listings:index') This results in the user, once logout out, being directed to the homepage and not the standard django logout screen.\nRegistration The registration proceedure contains, an addition to the urls.py\npath('register/', views.register, name='register'), The views.py makes use of the standard built-in functionality.\ndef register(request): if request.method != 'POST': form = UserForm() else: form = UserForm(request.POST) if form.is_valid(): form.save() return redirect('users:login') context = {'form': form} return render(request, 'registration/register.html', context) This a is rudimentary registration page. It doesn\u0026rsquo;t offer any confirmation of email address and is immediately active. It imports from the users app folder the UserForm() function from forms.py\nfrom django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User class UserForm(UserCreationForm): class Meta: model = User fields = ['username', 'email', 'password1', 'password2'] This in turn imports the UserCreationForm form the standard built-in.\nAn example of a simple registration form.\n{% extends \u0026quot;listings/base.html\u0026quot; %} {% block content %} \u0026lt;h1\u0026gt;Create Account\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026quot;post\u0026quot; action=\u0026quot;{% url 'users:register' %}\u0026quot;\u0026gt; {% csrf_token %} {{ form.as_p}} \u0026lt;button name=\u0026quot;submit\u0026quot; class=\u0026quot;btn\u0026quot;\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;next\u0026quot; value=\u0026quot;{% url 'users:login' %}\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt; {% endblock content %} That\u0026rsquo;s a basic overview of the user, loging and registration setup using the Django built-in.\n","date":"2022-09-19","permalink":"https://www.davidjnevin.com/code/django_users_registration/","tags":["django","postgres","SQL","Educative"],"title":"Django Users, Login \u0026 Registration"},{"content":"Deleting a listing Again we follow the same pattern as before. Url, view, and template.\nAdd the URL path('delete_listing/\u0026lt;delete_id\u0026gt;/', views.delete_listing, name='delete_listing') Add the view Very similar to the edit view.\ndef delete_listing(request, delete_id): listing = Listings.objects.get(id=delete_id) if request.method == 'POST': listing.delete() return redirect('listings:my_listings') context = {'listing': listing} return render(request, 'listings/delete_listing.html', context) Here were are calling the delete() function as opposed to the save() as in previous examples.\nAdd the template The key form element is:\n\u0026lt;form method=\u0026quot;POST\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;!-- Security token by Django --\u0026gt; {% csrf_token %} \u0026lt;h3\u0026gt;Do you want to delete \u0026lt;b\u0026gt;{{listing.title}}\u0026lt;/b\u0026gt; listing ? \u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;\u0026lt;input type=\u0026quot;submit\u0026quot; class=\u0026quot;btn\u0026quot; value=\u0026quot;Delete\u0026quot; /\u0026gt; \u0026lt;a class= \u0026quot;btn\u0026quot; href=\u0026quot;{% url 'listings:my_listings'%}\u0026quot;\u0026gt;Cancel\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; Note again, the use of the CSFR token.\nWire up the delete button Finally the href of the delete button on the my_listings template is wired up.\n\u0026lt;a class=\u0026quot;btn\u0026quot; href=\u0026quot;{% url 'listings:delete_listing' my_listing.id %}\u0026quot;\u0026gt;Delete\u0026lt;/a\u0026gt; So far, items can be listed, added, edited, and deleted. Full CRUD up and running.\nSo far this Educative learning path is paying dividends.\n","date":"2022-09-15","permalink":"https://www.davidjnevin.com/code/django_delete_items/","tags":["django","postgres","SQL","Educative"],"title":"Django Delete Items"},{"content":"Editing items in the PostgreSQL DB The pattern now is as before.\nAdd the URL Adding the url to the page into the app urls.py\npath('edit_listing/\u0026lt;edit_id\u0026gt;/', views.edit_listing, name='edit_listing') Create the view Create the edit view in views.py. Here the contents of a form are being altered.\ndef edit_listing(request, edit_id): listing = Listings.objects.get(id=edit_id) if request.method != 'POST': form = ListingForm(instance=listing) else: form = ListingForm(request.POST, request.FILES, instance=listing) if form.is_valid(): form.save() return redirect('listings:all_listings') context = {'listing': listing, 'form': form} return render(request, 'listings/edit_listing.html', context) Create Template .html file The key aspects here are:\n\u0026lt;form action=\u0026quot;{% url 'listings:edit_listing' listing.id %}\u0026quot; method='post' enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {% csrf_token %} {{ form.as_p }} \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn\u0026quot;\u0026gt;Edit listing\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; Wire up the Edit Button There is now a functioning Edit listing page. It just needs to be wired up to the edit button on the my_listings page.\n","date":"2022-09-15","permalink":"https://www.davidjnevin.com/code/django_edit_delete_items/","tags":["django","postgres","SQL","Educative"],"title":"Django Edit Items"},{"content":"Next step is to setup an individual item page. This tutorial is giving me a some good insights into the Critique Wheel rewrite. Ideas are percolating, and questions about testing and deploying are scratching at the back of my neck. Patience.\nIndividual Item Page First step with a new page, add it to the app\u0026rsquo;s views.py.\ndef detail(request, detail_id): detail = Listings.objects.get(id=detail_id) context = {'detail': detail} return render(request, 'listings/detail.html', context) Note to self: context is a dictionary of values passed to the template.\nThe urls.py additional line is:\npath('my_listings/', views.my_listings, name='my_listings') And the template key part:\nfor my_listing in my_listings %} \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ my_listing.title }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ my_listing.list_date }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a class=\u0026quot;btn\u0026quot; href=\u0026quot;{% url 'listings:detail' my_listing.id %}\u0026quot;\u0026gt;View\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a class=\u0026quot;btn\u0026quot; href=\u0026quot;\u0026quot;\u0026gt;Edit\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a class=\u0026quot;btn\u0026quot; href=\u0026quot;\u0026quot;\u0026gt;Delete\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endfor %} This gives a list of all items, once users are setup this list can be filtered by user item.\n","date":"2022-09-14","permalink":"https://www.davidjnevin.com/code/django_individual_item_page/","tags":["django","postgres","SQL","Educative"],"title":"Django Individual Item Page"},{"content":"Day 2: Dynamic Content A few useful django db queries:\nvariable_name = model_name.objects.all() Returns all objects from the database for the specified model_name\nvariable_name = model_name.objects.first() Returns the first object from the database for the specified model_name\nvariable_name = model_name.objects.last() Returns the last object from the database for the specified model_name\nvariable_name = model_name.objects.get(name='Sam') Returns an object or objects from the database that match name=\u0026lsquo;Sam\u0026rsquo; for the specified model_name\nvariable_name = model_name.objects.order_by('list_date') Returns an object or objects from the database ordered by list_date for the specified model_name\ndjango docs: making queries\nSQL Queries From my C# projects, it feels already like a layer between the actual SQL queries and the process. Looking forward to seeing how actual SQL queries and SQL stored procedures are used.\nFor now it\u0026rsquo;s django ORM tricks.\nTemplate tags Similar to Razor pages, django has template tags.\n{% ... %} {% for items in list %} {% empty %} # if empty {% endfor %} Forms Pulling form the model in models.py the forms.py imports forms and the class inherits from forms.ModelForm\nfrom django import forms from .models import Listings class ListingForm(forms.ModelForm): class Meta: model = Listings fields = [ 'title', 'condition', ... ] The template used to display the form, new_listing.py\n\u0026lt;form action=\u0026quot;{% url 'listing_app:new_listing' %}\u0026quot; method='post' enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; {% csrf_token %} {{ form.as_p }} \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot; class=\u0026quot;btn\u0026quot;\u0026gt;Create Listing\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; {% csrf_token %} - Cross Site Request Forgery Token {{ form.as_p }} – Render Django Forms as paragraph\nSo far The site has a working form, which when first called is blank and once confirmed as valid submits the content, using a csrf_token and returns a redirect address. Good.\n","date":"2022-09-14","permalink":"https://www.davidjnevin.com/code/django_dynamic_content/","tags":["django","postgres","SQL","Educative"],"title":"Django Dynamic Content"},{"content":"Poetry and Django So poetry is up and running. Django is up and running, and I\u0026rsquo;ve added a simple listing app into the Django project.\nNext is setting a homepage. But there is a niggling thought that surely there\u0026rsquo;s a way to script all the necessary little additions of go to this file and do this, then do this, if you know what I mean.\nI get that there\u0026rsquo;s a process, but it seems like for any startapp command, there are a few steps that could be automated. Once I\u0026rsquo;ve done it a dozen or more so times, I suppose I\u0026rsquo;ll be able to recognize this as something doable or already done, or just novice user ignorance. I\u0026rsquo;ll add it here once I know one way or another. #TODO\nFor the moment though, it\u0026rsquo;s onwards to the Homepage setup.\nOkay, after changing the wrong urls.py file I got that working.\nNote to self: I have to admit here that building the critique wheel project feels daunting. The thought of going through all that again\u0026hellip; Well the idea here is to get to that point, quickly, efficiently, and with a new level of confidence.\nSome time later\u0026hellip; Okay, I\u0026rsquo;m getting it, I think.\nFor each new page, from the back out, there needs to be a url reference in the app\u0026rsquo;s urls.py, and a view refernece in the app\u0026rsquo;s view.py together with a html template in the templates folder under of the app in a folder of the same name.\nThis is a kind of namespace methodology. In this respect, I do prefer the C# method, but that\u0026rsquo;s another story.\n","date":"2022-09-13","permalink":"https://www.davidjnevin.com/code/django_next_steps/","tags":["django","postgres","SQL","Educative"],"title":"Django Next Steps"},{"content":"Getting a project up and running I had an interesting conversation this morning with Bob from Pybites. He was able to confirm what I\u0026rsquo;d been musing over the past few days. It was time I started working on some projects. In that spirit, I decided to jump into the Educative learning path Become a Django Developer. First off, it drops you straight in with no install instructions. I\u0026rsquo;ve played with poetry before so I decided to go that route to manage any dependencies and virtual environments that I might need.\nUseful tip: At the time of writing this and using django4 the startproject.\nI set up Postgres in my local machine using brew, created a user and password,and connected my django install to a new database created for that purpose. Not a bad hour.\nIf in doubt, the next few hours were not so easy. The Eduactive learning path doesn\u0026rsquo;t go into any details on installing Django. (let the fun begin. I set it up in poetry and getting any of the commands, such as python manage.py makemigrations to run took me some time to get me head around. All the commands in the tutorial need to be run with the prefix of poetry run.\nSo, far so good. But the tutorial recommends using PostgreSQL as the database type. Queue install PostgreSQL.app, test it, find it in compatible with the instructions I\u0026rsquo;m finding online to set up a new user, remove it. (somewhat complicated), install using brew and then get it up and running and create a new user, so as not to use my Mac login and password.\nOk, then the problems started. I altered the settings.py of my Django project to reflect the PostreSQL choice and boom, everything I tried kept referring me to the DJANGO_SETTINGS_MODULE. I had added the project name here, tried it without a final comma, (but this seems to be a Black formatting step. Deleted the git repo, the local files and started again.\nI repeated all the steps, this time following another web page, read up on some Django documentation and after much ado ended up exactly where I had been two hours earlier.\nSo what was the problem? Essentially, I had left the BASE_URL setting in place for the PostgreSQL database path. This is not necessary for PostgreSQL. Yep, that did it. With that gone, it was sweet running.\nSo far, I have a running Django (empty) app on my local machine, and possibly running on a PostgreSQL database.\nOnly five hours.\nNow to get it all committed to the new repo. And see what step two in the Educative course is.\n","date":"2022-09-13","permalink":"https://www.davidjnevin.com/code/django_games_first_steps/","tags":["django","postgres","SQL","Educative"],"title":"Django Games First Steps"},{"content":"It\u0026rsquo;s been a busy few weeks. The Pybites community and coding platform has seen about 90% of my Python time over the past four weeks.\nThe setup is simple, there are a number (10, I think) of Intro Bites (coding problems) to get started on, and hooked.\nFrom there, once I signed up, I did the beginner Bites. After studying and coding for sometime I was surprised with the breath of the topics covered. It was challenging. The key to the platforms addictive nature is the in the bites themselves.\nNot only is there the dopamine rush of having your code pass the pytests, there\u0026rsquo;s also the knowledge that what you just solved is in a simplified manner, a real world problem. There are about 370 bites as of writing this, and I expect more to be added over time. The range from beginner to intermediate to advanced. But don\u0026rsquo;t be fooled, even the beginner bites require a good understanding of the topic in question.\nIt\u0026rsquo;s addictive. And I\u0026rsquo;ve been moving through the learning paths, starting with the algorithms. I started there because I\u0026rsquo;d done a lot of similar code on leetcode and while of interest, I quickly discovered that this wasn\u0026rsquo;t going to be of the most benefit to me. I switched, having done six or seven, did and completed the Collections learning path and am finishing the Data Types, in the coming week.\nIt\u0026rsquo;s these learning paths, focused entirely on python libraries that are reaping rewards. I\u0026rsquo;ve a feeling now that I can get started on my CritiqueWheel project.\nThat looks like it\u0026rsquo;ll be a Django project, ideally using MongoDb. My goal however is to make the front-end and back-end completely decoupled. FastAPI is a term I\u0026rsquo;ve seen bandied about and there\u0026rsquo;s a learning path dedicated to that in PyBites too.\nAt present I\u0026rsquo;m going to go back to Educative and start and complete the Django course there. I\u0026rsquo;m paid up, so I want to get the most out of it. Meanwhile, I\u0026rsquo;ll finish my current learning path with PyBites, then turn to Decorators and Context Managers before FastAPI.\nWe\u0026rsquo;ll see where that takes me. Watching a video the other day, one of the recommendations was four strong projects on my GitHub might be enough to swing an interview for a junior dev position. The CritiqueWheel might be too big to get started, but there\u0026rsquo;s a twitter API project, I\u0026rsquo;d like to play with.\nAnd to the title of this post, I\u0026rsquo;ve just reached the Orange Belt level in the PyBites challenges. It\u0026rsquo;s when you have over a 100 points, and for me I\u0026rsquo;ve successfully coded 52 Bites. I\u0026rsquo;ve studied game theory and know its basic ins and outs, but it\u0026rsquo;s damn effective in keeping my brain at it in the wee hours of the night.\nThe journey continues.\n","date":"2022-09-11","permalink":"https://www.davidjnevin.com/code/orange_belt/","tags":["Pybites","pytest","learning paths","Bites","Collections","Data Types"],"title":"Orange Belt"},{"content":"Slack Community So I\u0026rsquo;ve been hanging out in the PyBites Slack Community for a few weeks. I\u0026rsquo;m mostly lurking and adding a comment or emoji or a question. Nothing major. But it\u0026rsquo;s really nice to be in touch with other pythonistas. It certainly feels great to be doing this self-learning path with a few others within earshot.\nI recently discovered and immediately signed up for the free The 6 Key Ingredients of a Successful Pythonista PyBites Training and on day two there\u0026rsquo;s an in-depth look at getting to terms with setting up a git repo, using poetry to setup your Python project and environment, adding, committing, branching and the like. It\u0026rsquo;s an excellent video.\nGit repos and Main as defaultbranch Creating a github repo is something I\u0026rsquo;ve done oodles of times, so that was easy. But when I got to initializing a git repo locally (something I\u0026rsquo;ve also done on may occasions) my primary branch was labeled master and not main. This bugged me. It wasn\u0026rsquo;t what I wanted. Queue rabbit hole.\nLabeled it seems has a whole set of config files in the $HOME directory. Who knew? I certainly didn\u0026rsquo;t. By editing the ~/.gitconfig file, I was able to see that indeed my defaultbranch was set to main. Ok.\nI exited my terminal, tried to init again and nope. Just having seen the setting didn\u0026rsquo;t convince my new init to do want I wanted. I trundled off to the browser. I found a git --global command to set the init.defaultbranch. Didn\u0026rsquo;t work. And what\u0026rsquo;s more my z shell autocomplete stopped working. I was cd\u0026rsquo;ing using full directory names. It was rough.\nZ Shell plugins So off I went back into my .zshrc file to see what was changed. Of course it was as I had left it a month ago when last I tweaked it. I was even able to remember some of the old tweaks I made.\nLooking for a way to change my autocomplete plugin, I rediscovered I was using zplug. And looking for the autocomplete install with zplug I found a recommendation to update zplug. That seemed to do it, or at least it undid what git \u0026ndash;global did. Or so I thought. My autocomplete was working, I could navigate with ease again, but my git init was still defaulting to master.\nI found a git \u0026ndash;global command to clear the default, no joy. I reread the instructions here and updated git. Tried again. No joy. I went back and forth a few times deleting the local repo, recreating it and then trying again. Eventually after re-re-reading the instructions I saw this little note. \u0026ldquo;remember to add a new line after the first line in the template/HEAD file\u0026rdquo;. Of course this worked immediately. So I could git init with main as the default branch and get it to push. Relief.\nPython Blog Feed Searcher (Console App) So the tutorial code that Bob of PyBites used to demo the add and commit was a basic RSS (Really Simple Syndication) console app written in python. It parsed an RSS feed and returns matches for terms inputted through the console. I though to myself well that sounds like fun.\nSo tweaking that code, I wrote a short script that allows me to search the RSS feed of this blog and return hits in the console. It took me down another rabbit hole of RSS setting in Hugo but thanks to [this digitaldrummerj article] (https://digitaldrummerj.me/hugo-create-rss-feed/) I got it up an running and limited to the blogs and not the static pages. Another win.\nTest driven understanding I\u0026rsquo;m off to see if I can get the search tool running and write the tests for it. But so far, it\u0026rsquo;s been an eventful trip into git, local repos, hugo, and generally learning the stuff that counts.\n","date":"2022-08-26","permalink":"https://www.davidjnevin.com/code/rss_python_search_hugo/","tags":["Hugo","search","learning"],"title":"RSS Python Search Hugo"},{"content":"The Last Week of August August is a funny month in Spain. Ever since I moved here in 2001, there has been a tacit agreement that not a lot happens in August that isn\u0026rsquo;t postponed until September. It\u0026rsquo;s a month of partial down-time. Many businesses close for the month, holidays are taken and the heat and habit determines a lower level of productivity. The summer heat dictates a more gentle pace of live and the country withdraws in preparation for the restart in September. Mine has been no different, work dried up for the first two weeks and the heat this year was more than the norm. I was fortunate to be able to use the time to get some programming practice and courses under my belt. August for me me though, always feels like I could have done more, but then some rest is important.\nThe Job I Didn\u0026rsquo;t Apply For There\u0026rsquo;s a company in Dublin that was hiring at the beginning of the month. An old work colleague is the founder and they were looking for new people to expand their sales team. It seemed like an opportunity to get into an AI company and put my sales experience to use. I signed up for LinkedIn premium (something I\u0026rsquo;ve resisted since the beginning) and embarked on a flurry of sales courses. My rationale was that since I have eight years experience in B2B sales those skills were easier to brush up on, rather than trying to prove my self-taught Python skills.\nNine courses later, and worthwhile course, mind you, I knew it wasn\u0026rsquo;t going to be the job I was going to apply for. I\u0026rsquo;ve always enjoyed sales, but there is a lot of water under the bridge since my last job. Learned a lot, but really could have spent that time getting a few Python projects up on my Github.\nAugust Python With renewed clarity, I got back to Python. Completed a DataQuest course on \u0026quot; Python Functions and Learn Jupyter Notebook\u0026quot;, an Eduactaive course on \u0026ldquo;Python Data Analysis and Visualization\u0026rdquo;, mostly numpy and matplotlib, good stuff, and two other LinkedIn courses \u0026ldquo;Python Data Analysis\u0026rdquo; and Building a Recommendation System with Python Machine Learning \u0026amp; AI\u0026quot;, a low level look at the field.\nI also earned my first \u0026ldquo;ninja\u0026rdquo; belt at PyBites. It\u0026rsquo;s a great site, and I\u0026rsquo;m weigh up the monthly fee against what is my first experience of a friendly python community.\nI do wish I\u0026rsquo;d found it earlier, before I committed monthly budgets to other services. Maybe it\u0026rsquo;s a better buy than LinkedIn premium.\nThe plan, Stan? There\u0026rsquo;s a nine hour course on LinkedIn relating to recommendation systems which I\u0026rsquo;m very interested in. There\u0026rsquo;s a 22 hour learning path on DataQuest Become a Machine Learning Enginneer. I have to say, these courses should be named with employers in mind and not the course buyers. Wouldn\u0026rsquo;t \u0026ldquo;Machine Learning Engineering\u0026rdquo; be a better title to have appear on the certificate? Just saying.\nThen there\u0026rsquo;s Educative\u0026rsquo;s Data Analysis and Visualization with Python course that I\u0026rsquo;m halfway through. So yes, it\u0026rsquo;s been and continues to be a productive August, taking advantage of the down-time at work and getting skilled up, in both the soft-skills of B2B sales and Python. Not too bad.\n","date":"2022-08-22","permalink":"https://www.davidjnevin.com/code/summer_of_code/","tags":["Data Science, LinkedIn, LeetCode, PyBites "],"title":"Summer of Code"},{"content":"Vim setup: The never-ending story Joy! I\u0026rsquo;ve gotten my Python virtual environment set up, installed Flake8() and managed to trouble-shoot a problem with the Syntastic auto-running of Flake8() on save. Thrilled.\nSure, sometimes it\u0026rsquo;s the little things that make your day or your hour, but it\u0026rsquo;s important to celebrate them all the same.\nAt present when I save a Python file, Flake8 runs and when I navigate to the lines with an error highlight, the specific Flake8() error is displayed below the status bar. This is perfect. When I used Flake8() in Visual Studio it just rewrote the files.\nThis was convenient but, while I didn\u0026rsquo;t feel I was cheating, I did feel I was cheating myself of the opportunity to learn best practices.\nMuch happier with this setting in my Vim set up.\nOkay, onwards to TDD, now that my IDE is humming.\nSome time later So that was a moment. I\u0026rsquo;ve since installed and setup ALE with Black and Flake8 set to run automatically upon save. After playing with spaces, tabs and trying to get rid of indentation \u0026rsquo;errors\u0026rsquo; for too long, I decided that auto-linting was of course the way to go.\n","date":"2022-07-30","permalink":"https://www.davidjnevin.com/code/vim_as_python_ide/","tags":["Vim","Flake8","Syntastic"],"title":"Vim as Python IDE"},{"content":"Test Driven Development (A cure for Refactor-phobia) There is an entire C# application running at CritiqueWheel.com that I have been dreading revisiting. It needs it, but it\u0026rsquo;s my first major app with no prior programming experience. So it\u0026rsquo;s a mess. The mere though of refactoring it scares me.\nThankfully I have gotten to a place where I happy enough with syntax use in Python to start exploring TDD, test driven development. And so far it has been a revelation and a complete rethinking of my fear or refactoring.\nServed with a pinch of beginner\u0026rsquo;s salt. I\u0026rsquo;m working through a series of examples/projects that focus on TDD and I gotta say the red, green, refactor methodology is such a crutch when developing the code. The simple satisfaction of going through the process in an iterative fashion, knowing that I can either revert to a previous commit with a working test, or \u0026lsquo;know\u0026rsquo; when my code is passing, is a great boost to my confidence.\nIt has to an extend brought back some of the fun.\nTDD resources This is where I caught the TDD bug, Learn Python with Test-driven Development and TDD Full Course (Learn Test Driven Development with Python) is where I\u0026rsquo;m practicing to take it a little further.\nRefactoring here I come Once I have a clear enough understanding of the process and feel I can do it comfortably, I\u0026rsquo;ll be heading back to C# to put it all in action. There is however a lingering doubt that maybe the CritiqueWheel should be a python project\u0026hellip; #TODO\n","date":"2022-07-30","permalink":"https://www.davidjnevin.com/code/test_driven_development_first_steps/","tags":["TDD","First Steps","Refactoring"],"title":"Test Driven Development: First Steps"},{"content":"Sometimes it takes more than Motivation Lessons learned:\nIt\u0026rsquo;s so easy to fall out of practice A short break, to catch up on some reading, a delve into some other interests and lo-and-behold I felt almost back at stage one when I tried to do a Leetcode exercise\nAt first there was a total stupefaction of linked lists and vim shortcuts. It took some time but I wrote it. Riding a bicycle it is not. It worked, I added a tick to my calendar, that felt good.\nIt\u0026rsquo;s often hard to find the reason to get back into the coding seat. There\u0026rsquo;s been a lot going on, it seems the outside world is intent on intruding. So be it, the dice has been rolled and now it\u0026rsquo;s back again to moving forward step by step. This is requiring a certain element of faith in the process and also the idea of being gentle on myself. The focus is on the next step not the previous stumbles.\nQuestioning the value of each step As opposed to weighing up and trying to determine if each next step is the best one, I\u0026rsquo;ve come back instead to my previous goal of completing the Roadmap I started out on.\nAfter organizing the folder structure and moving the solutions and projects to their prospective folders, I tackled a Leetcode problem. One down.\nOne closer.\nTrying to decide too quickly My struggles with DataQuest project was based on me deciding too early that it wasn\u0026rsquo;t my thing. But that\u0026rsquo;s not a fair assessment, for me or for the field of Data Science. It\u0026rsquo;s simply too early to tell. So I\u0026rsquo;m stepping back, working on one aspect at a time and will return to complete it once I\u0026rsquo;m done with the Roadmap. I think this is the best I can offer myself given the time and energy I have to dedicate at present.\nThe wish for a few weeks off to dedicate hours upon endless hours to the study and mastery of Phyton is for me a trap. I prefer the ordered structure of employment. It eases the need to self-manage my time completely and certainly eases the financial burden.\nOnce again it\u0026rsquo;s back to what I started, and the possibility of Upwork or other freelance jobs will have to wait until I feel more at ease and more practiced with Python.\nSo I\u0026rsquo;m back at it, looking forward to learning a few new things this week and weekend, and also looking forward to relearning and rediscovering my vim setup.\n","date":"2022-07-28","permalink":"https://www.davidjnevin.com/code/back_at_it/","tags":["learning"],"title":"Back at It"},{"content":"The last week It\u0026rsquo;s been a strange week. My regular job has dwindled to a minimum and with the extra time comes extra worry about income. Instead of focusing too much on the concerns, I decided to focus more on my studies, but motivation and worry and closely linked.\nLeetcode At this point I\u0026rsquo;ve fallen behind my original plans of one leetcode problem a day, seven days a week. There are a few which I feel I could do, but others that I know I have some serious study to do in order to attempt. (My list of problems to solve is based on this excellent roadmap by Utsav.)\nMy expectations were overly high, on my ability to multi-task across multiple courses, topics, and focuses. So instead, I\u0026rsquo;m planning to get back up to date and reduce my planning to six a week. If I over-achieve then great, but six a week will still bring me in at just over fifty problems by the end of this month.\nData Science The Data Science course I\u0026rsquo;m doing in DataQuest has taught me a lot. I\u0026rsquo;m more comfortable with Jupyter notebooks, and almost have the first project ready for addition to my data_projects github repository.\nEducative - Python For Programmers The Python for Programmers path is done. Quiet good with the exception of the final module perhaps. It wasn\u0026rsquo;t really my style of teaching, more of an info dump, I felt.The next path I\u0026rsquo;m not sure about yet. I\u0026rsquo;m considering the following:\nFrom Python to Numpy Python for Scientists and Engineers Matplotlib for Python: Visually Represent Data with Plots Applied Machine Learning: Industry Case Study with TensorFlow Data Analysis \u0026amp; Processing with Pandas Django For Upwork I\u0026rsquo;m seeing a demand for Django developers and while it\u0026rsquo;s tempting to jump into some further study of Django I need to hold off until I am more at ease with the depths of the DataQuest course. In particular I want to fully understand and have practiced Numpy, Pandas, and Mathplotlib, to name only three.\nKey Take-away Getting back into the rhythms with Leetcode\nContinuing to develop data science skills\nSharing projects on my GitHub as they are completed\nHold off on Educative next step until I have more clarity where the Data Science is going.\nMeasurable: 50 Leetcode problems by end of July, Complete Data Analysis and Visualization with Python path on DataQuest by end of July, and publish 4 projects on github.\n","date":"2022-07-09","permalink":"https://www.davidjnevin.com/code/keeping_at_it/","tags":["Motivation","Update","Coding"],"title":"Keeping at it"},{"content":"That\u0026rsquo;s Better Had a moment of \u0026ldquo;what\u0026rsquo;s happening\u0026rdquo;, but I get it now. I created a .py file as opposed to a .md file with the hugo new command and got this page with almost no front matter. A quick delete and another new-up and here we are.\nPlay Time There are a few things I want to work on today and use them to try and take a break from some of the Python courses I\u0026rsquo;m doing.\nCode Snippets on the Site Today\u0026rsquo;s the day I\u0026rsquo;m going to enter the ring again with my old nemesis CSS. The code snippets are showing up with in two columns, the line numbers and the code itself. The line number column however is very wide. I\u0026rsquo;ve generated a chroma .css file using:\nhugo gen chromastyles --style=monokai \u0026gt; syntax.css But that just get\u0026rsquo;s me code highlighting css. So it\u0026rsquo;s into the bowels of minima I go. I am tempted to see if I can find some good examples first before trying to play with the css in the browser window.\nThat\u0026rsquo;s what I\u0026rsquo;ll do, and I\u0026rsquo;ll do it with the Chrome inspector.\nDid it! Buried deep in the typography.scss file was a reference to\n.highlight pre { padding-right: 75px; } So now across all the site the code snippets look much more defined and legible. They don\u0026rsquo;t look like this anymore:\nExcellent, that only took an hour or three. Nice!\nSatisfying CSS There is something very satisfying about making a change like that to the CSS and having the improvement ripple out out across all the site. :)\n","date":"2022-07-02","permalink":"https://www.davidjnevin.com/code/time_off_for_play/","tags":["String"],"title":"Time Off for Play"},{"content":"It\u0026rsquo;s been a full few days The Educative OOP course is almost done. It\u0026rsquo;s time to start exploring a new avenue of learning, namely DataQuest, a highly recommended Data Science education site. I\u0026rsquo;ve signed up for a year, there was a special offer week, which I took advantage of with 12 mins to spare.\nEducative OOP The OOP course has been really good, but I feel it\u0026rsquo;s only scratched the surface. I\u0026rsquo;ve noticed myself starting to look for other resources to supplement, and in some cases explain the topics being imparted. So I\u0026rsquo;m feeling ready to try out some different course and styles of teaching.\nDataQuest The DataQuest site, when I first checked it out, seemed overwhelming but it\u0026rsquo;s grown on me. My initial reaction was that the early Python classes were too basic and slow paced. I didn\u0026rsquo;t realise at the time, but this was a sign of what I had begun to learn.\nYesterday and today, I\u0026rsquo;ve been motoring through the material and am gaining an appreciation for the style. It\u0026rsquo;s incredibly focused on the task at hand, data manipulation. The examples are spot on and I\u0026rsquo;m reviewing my basics but through the lens of data manipulation. (My data lingo is still quiet limited, so manipulation is the word I\u0026rsquo;m using for the moment.)\nWorkflow Vim is set up and I\u0026rsquo;m more comfortable using it. This post is being written in it along with a terminal running Hugo for live previews and builds. I\u0026rsquo;m working on tuning my .vimrc file as well as .zshrc without it becoming a full time hobby. ;)\nNext Steps The plan for the rest of the week it three pronged, because I prefer to have my attention met across different products. If my focus wains, I prefer to have a second or third course/project at hand to make the best use of my time.\nSo, I\u0026rsquo;m intending to finish the Educative OOP course tonight. I want to advance at the same rate in the DataQuest learning path I\u0026rsquo;m on. (Data Analysis and Visualization with Python) If possible I\u0026rsquo;d like to be done in maybe two weeks with a few demonstrable projects.\nI\u0026rsquo;ve been skimming Upwork and liking jobs that I don\u0026rsquo;t know how to do, but I think I\u0026rsquo;d like to be able to. So, I\u0026rsquo;m beginning to adjust and specialize my next courses to match these professional interests, hence the focus on DataQuest\nUpwork has also helped me prioritize the learning I want to do in Django. I\u0026rsquo;m seeing the possibility of work there and also the potential uses of being able to present the Python code projects on a site running Python. It\u0026rsquo;s a little vague yet, but it\u0026rsquo;s getting there.\nNow, back to it.\n","date":"2022-06-29","permalink":"https://www.davidjnevin.com/code/where_im_at_june_29/","tags":["Update","Courses","Upwork","Vim"],"title":"Where I'm at"},{"content":"A Banking Class Example Following the tutorials in Educative I wrote my first class with inheritance. It\u0026rsquo;s basic but it works.\nIt\u0026rsquo;s a far cry from what I\u0026rsquo;ve done previously in C# and the self takes some getting used to.\nI\u0026rsquo;m running a pep8 (flake8) plugin in my Vim to check my code, but there is a fair bit of confusion happening with my autocomplete. It\u0026rsquo;s messing with my head, particularily here in Goyo editing mode.\nHere\u0026rsquo;s the class I\u0026rsquo;ve written, admist all this confusion.\nclass Account: def __init__(self, title=None, balance=0): self.title = title self.balance = balance def withdrawal(self, amount): self.balance -= amount def deposit(self, amount): self.balance += amount def getBalance(self): print(self.balance) class SavingsAccount(Account): def __init__(self, title=None, balance=0, interestRate=0): # calling the constructor from the parent class super().__init__(title, balance) self.interestRate = interestRate def interestAmount(self): print(self.balance * self.interestRate / 100) a = SavingsAccount(\u0026quot;Mark\u0026quot;, 5000, 5) a.deposit(1000) a.withdrawal(500) a.getBalance() a.interestAmount() I\u0026rsquo;m chuffed to be able to do it through Vim and run it in a terminal below the code. Similar experience to VS Code? Kind of but there\u0026rsquo;s a feeling of knowing the how and a little of the why.\nOkay, on to Polymorphism.\n","date":"2022-06-28","permalink":"https://www.davidjnevin.com/code/implementing_child_class/","tags":["Class","Classes","Vim","pep8","Goyo","Flake8","Inheritance"],"title":"Implementing A Child Class"},{"content":"Time to Tweak the Terminal Having played around with and gotten some comfort level with Vim with VS Code, I feel it\u0026rsquo;s time to start exploring using Vim from the terminal. Dun, Dun, Dun! I\u0026rsquo;ve very little experience with this apart from git and running the occassional hugo or gulp basic commands, also from within the VS Code environment.\nIn order to setup Vim properly and to make the most of the experience of writing Python, it\u0026rsquo;s the next logical step for me to get comfortable with the terminal. Already I\u0026rsquo;ve found a multitude of plugins, hacks and possibilities to alter the terminal experience, but let\u0026rsquo;s go step by step.\nI want to have an idea of where I am in the terminal, in terms of location, but at present my terminal shows an enormous string on the command prompt line. Here\u0026rsquo;s an example\u0026quot;\n(base) Communitymanager-work@David-Nevins-MacBook-Pro ~ % This as you can imagine offers a high level of distraction and once I delve deeper into folders it becomes a mess. And yes, I know my computer name is a mess, I set it some years ago when I only ever considered the experience from inside the MacOS environment. Subsequent migrations with using full backups have carried over this mistake many times.\nTo change the command prompt text for a single use I found the following command on stackoverflow.\nPS1=\u0026quot;\\w\\n\u0026gt;\u0026quot; Warning: Rabbit hole!\nZ-Shell Customizing Following the advise of these two videos by Corey Schafer:\nCustomizing Your Terminal: .bash_profile and .bashrc files Customizing Your Terminal: Adding Color and Information to Your Prompt I went through the process of exploring both video\u0026rsquo;s and in doing so stumbled across the depreciation warning in my MacOS bash shell. After a little reading of this excellent series Scripting OX and then switched my setup to zsh or z-shell, as the preferred/recommended MacOS terminal default.\nI also discovered Oh-my-zsh but that is taking it too far for me at the moment.\nI just want a few tweaks to offer a few handrails while I get into terminal usage.\nFor anyone interested, the zsh manual is here. zsh options\nI choose to use the ~/.zshrc for my personal configurations.\nThis zsh/Misc/vcs_info-examples github was the basis for the git functionality in the command line.\nThis is what I ended up with: (edited to remove anaconda and other config details)\nautoload -Uz vcs_info precmd() { vcs_info if [[ -z ${vcs_info_msg_0_} ]]; then PS1=\u0026quot;%5~%# \u0026quot; else PS1=\u0026quot;%2~${vcs_info_msg_0_}%# \u0026quot; fi } setopt prompt_subst # Enable wildcard search and tab through options setopt NO_CASE_GLOB # Auto change to directory if directory name is used setopt AUTO_CD # Remember history from previous sessions HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history # Add additional info to shell history setopt EXTENDED_HISTORY SAVEHIST=5000 HISTSIZE=2000 # share history across multiple zsh sessions setopt SHARE_HISTORY # append to history setopt APPEND_HISTORY # adds commands as they are typed, not at shell exit setopt INC_APPEND_HISTORY # expire duplicates first setopt HIST_EXPIRE_DUPS_FIRST # do not store duplications setopt HIST_IGNORE_DUPS #ignore duplicates when searching setopt HIST_FIND_NO_DUPS # removes blank lines from history setopt HIST_REDUCE_BLANKS # When you mistype a command or path, the shell is usually unforgiving. In zsh you can enable correction. setopt CORRECT setopt CORRECT_ALL #Aliases alias ll='ls -al' ... Vim Config This it seems is a whole entire universe. In nuce, I went with a combination of these two configurations. It will evolve as my understanding of my needs evolve.\nhttps://github.com/oidz1234/vimrc/blob/main/.vimrc https://vim.fandom.com/wiki/Example_vimrc I installed the Vim Plug following instructions from here: Linux Devices which lead me to simply go with the automatic installation guide from Junegunn Choi here.\nSo, I\u0026rsquo;m set up in Vim, feeling smooth but still don\u0026rsquo;t know how to use tabs, filetree or everything else beyond basic commands.\n","date":"2022-06-26","permalink":"https://www.davidjnevin.com/code/terminal_tweaks/","tags":["Terminal","Tweaks","Vim"],"title":"Terminal Tweaks"},{"content":"Parent Class Parent Class (Super Class or Base Class): This class allows the reuse of its public properties in another class.\nChild Class Child Class (Sub Class or Derived Class): This class inherits or extends the superclass.\nA child class has all public attributes of the parent class.\nclass ParentClass: # attributes of the parent class class ChildClass(ParentClass): # attributes of the child class Super() Function We use super() as opposed to self to access the parent class properties instead of the child class properties of the same name.\nTypes of Inheritance Single, Multi-level, Hierarchical, Multiple, and Hybrid\nSingle Inheritance There is only one class extending from another class.\nMultiple Inheritance A class extends another class which itself extends another class.\nHierarchical A base class is extended by distinct classes depending on the requirements.\nMultiple Inheritance A class extends or is derived from more than one base class.\nclass ClassName(BaseClass, AnotherBaseClass, ...): def method() pass Advantages of Inheritance Reusability, code modification, extensibility and data hiding.\n","date":"2022-06-26","permalink":"https://www.davidjnevin.com/code/inheritance/","tags":["Relationship","Parent Class","Super Class","Base Class","Child Class","Sub Class","Derived Class"],"title":"Inheritance"},{"content":"Information Hiding The process of hiding the \u0026lsquo;inner workings\u0026rsquo; of a method or class by providing only an interface to access the object.\nEncapsulation The binding of data and methods into a single unit, i.e. a class.\nIt is considered good convention to declare all variables in a class as private if the class designed for encapsulation.\nAccess is granted through getters and setters.\nGet and Set Get allows the reading of a property\u0026rsquo;s value, while set allows the modifying of a property\u0026rsquo;s value.\nIt\u0026rsquo;s common practice to write get and set methods using the property name. For example for __username we would use getUsername and setUserName.\n","date":"2022-06-25","permalink":"https://www.davidjnevin.com/code/information_hiding/","tags":["Interface","Encapsulation","Abstraction"],"title":"Information Hiding"},{"content":"Share This Post Widget I\u0026rsquo;m working on implementing the code and methods detailed by Christian Oliff at this page.\nWith any luck, this will allow me to have a simple, privacy conscious solution to allow readers to share a post to Twitter, Facebook, Linkedin, and via Email.\nLet\u0026rsquo;s see how it goes. #TODO\n","date":"2022-06-25","permalink":"https://www.davidjnevin.com/code/share_this_widget/","tags":["Twitter","LinkedIn","Widget"],"title":"Share This Widget"},{"content":"Classes and Methods: Some Notes If you don\u0026rsquo;t initialize the values of properties, the code will not compile. Initializing the values of properties inside the class is necessary.\nClass variables The class variables are shared by all instances or objects of the classes. A change in the class variable will change the value of that property in all the objects of the class.\nInstance variables The instance variables are unique to each instance or object of the class. A change in the instance variable will change the value of the property in that specific object only.\nMethod Overloading A method can be made to preform different operations by overloading it. In Python, as opposed to C# for example, methods must be implicitly overloaded.\nTypes of Methods Instance methods, class methods, and static methods.\nClass Methods Class methods are accessed using the class name and not the object, and they don;t require an object to be created to be accessed.\nWe use the @classmethod decorator, and we use cls to refer to the class as we used self to refer to the object.\nStatic Methods Static methods are usually limited to the class only and not their objects. They can be used as utilities for the class.\nWe use the @staticmethod decorator and we don\u0026rsquo;t use a reference to the method, such as self or cls.\nStatic methods have no knowledge of class variables or state, and so cannot modify class attributes.\nAccess Modifiers By default all methods and properties in a class are publicly available. Properties can be set to \u0026ldquo;private\u0026rdquo; by using the __ before the property name. Attempting to access this property will cause an error.\n","date":"2022-06-25","permalink":"https://www.davidjnevin.com/code/classes_and_objects/","tags":["Classes","Methods","Variables","Properties","Modifiers"],"title":"Classes and Objects"},{"content":"Projects for Python Use There are a plethora of project suggestions on the webs, but I\u0026rsquo;m keen to try something of my own, that has immediate impact on what I\u0026rsquo;m working on.\nThis post is an ongoing list of ideas that occur to me.\nThe idea will be to add links or posts dedicated to those projects. Which upon reflection probably should be under a different section. Probably called projects\u0026hellip;.\nThis is where they will live. Code Projects\n","date":"2022-06-25","permalink":"https://www.davidjnevin.com/code/python_project_ideas_001/","tags":["Projects","Python"],"title":"Python Project Ideas"},{"content":"Adding Some Flair I was unhappy with the functionality of the standard list page of the minima theme. Essentially, I needed something less minimal. So, looking for other themes on the Hugo official site I found the Anubis theme and it had what I wanted as regards a more complete list page for the posts.\nCannibalizing Anubis I installed it as a git submodule and then began to cannibalize the list templates therein. I\u0026rsquo;m happy with the result and also learned to use some more advanced (for me) features of including summary, adjusting the summaryLenght in the config.toml file and also ensuring that the links generated to the posts themselves, the tag list pages and the category list pages were relative links (relref) and not absolute links to avoid appending the external link icon to these links.\n{{ define \u0026quot;main\u0026quot; }} \u0026lt;main\u0026gt; {{ if isset .Data \u0026quot;Term\u0026quot; }} \u0026lt;h2\u0026gt;{{ .Data.Singular | title }} - \u0026quot;{{ .Data.Term }}\u0026quot;\u0026lt;/h2\u0026gt; {{ else }} {{ end }} \u0026lt;div\u0026gt; {{ $pages := where (where .Pages \u0026quot;Type\u0026quot; \u0026quot;in\u0026quot; site.Params.mainSections) \u0026quot;Params.hidden\u0026quot; \u0026quot;!=\u0026quot; true}} {{ range $pages }} \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .RelPermalink }}\u0026quot;\u0026gt;{{ trim .Title \u0026quot; \u0026quot; }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; {{ partial \u0026quot;post-info.html\u0026quot; . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; {{ end }} // And the post-info.html {{ $dateFormat := \u0026quot;2006-01-02\u0026quot; }} {{ if .Site.Params.dateFormat }} {{ $dateFormat = .Site.Params.dateFormat }} {{ end }} \u0026lt;div\u0026gt; {{ if not .Site.Params.disableSummary }} \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;{{ .Summary | safeHTML }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026quot;post-info\u0026quot;\u0026gt; {{ if and (.Truncated) (.Site.Params.readMore) }} \u0026lt;div class=\u0026quot;read-more\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;u-url\u0026quot; href=\u0026quot;{{ .RelPermalink }}\u0026quot;\u0026gt;{{ i18n \u0026quot;readMore\u0026quot; }}\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {{ end }} {{ if .Params.date }} \u0026lt;div class=\u0026quot;post-date\u0026quot;\u0026gt;{{ .Params.date.Format $dateFormat }}\u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026quot;post-taxonomies\u0026quot;\u0026gt; {{ if .Params.categories }} \u0026lt;ul class=\u0026quot;post-categories\u0026quot;\u0026gt; {{ range $cat_name := .Params.categories }} {{ $cat := ($.Site.GetPage (printf \u0026quot;/categories/%s\u0026quot; $cat_name)) }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{ $cat.RelPermalink }}\u0026quot;\u0026gt;{{ $cat.Title | default $cat_name }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} {{ if .Params.tags }} \u0026lt;ul class=\u0026quot;post-tags\u0026quot;\u0026gt; {{ range $tag_name := .Params.tags }} {{ $tag := ($.Site.GetPage (printf \u0026quot;/tags/%s\u0026quot; $tag_name)) }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{ $tag.RelPermalink }}\u0026quot;\u0026gt;#{{ $tag.Title | default $tag_name }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; That was fun and only took a while to get up and running. The color scheme in dark mode versus light mode might need some revisiting but for the moment I\u0026rsquo;m happy with the results.\nCSS External Link Indicator If you\u0026rsquo;re interested, I use the following CSS on my site to have an automatic addition of an external link icon to all external links. This link is internal, while this is to the same destination but uses an absolute link.\n// Show external links a:not(.icon)[href^=\u0026quot;http\u0026quot;]::after { content: url(/images/external.svg); } @media (prefers-color-scheme: dark) { a:not(.icon)[href^=\u0026quot;http\u0026quot;]::after { content: url(/images/external_dark.svg); } } Code Snippet Woes Next on the cards is to try and reduce the with of the line number column in the code snippets. At present it occupies far too much space and adds to the need for excessive horitzonal scrolling in the snippets.\nAt present the width is set to auto for the line number column and it smells like a rabbit hole.\nLater. Done: July, 2, 2022\nMulti-word tags and categories in Hugo FrontMatter Some of the tags and categories I apply to my posts are multi-word and this is causing problems when creating links to these tag/cat pages from the list page.\nThat\u0026rsquo;s one issue, which I don\u0026rsquo;t yet understand, given that I\u0026rsquo;m unsure how the tags/cats info is displayed/processed on the post-info.html template. This is causing the links under each post listing on the code index page, that is, the list of published posts, to fail. this is not good.\nSo quick fix, reduce the tags used to single words. This might be the best quick win. However, this means a data loss. What would I choose instead of Binary Search, binary or search. Neither are apt for what I wanted to express. The plot thickens.\nI know the tags pages has no problems displaying and linking the multi-word tags, so it\u0026rsquo;s possible. That\u0026rsquo;s a great first step, knowing it\u0026rsquo;s possible already.\nTime to investigate. #TODO\nnote: Meanwhile I\u0026rsquo;m deactivating the tags and categories as shown on the list pages. No point generating broken links.\nCould I use Python to Generate Tags? But, perhaps more interestingly I\u0026rsquo;m curious now how to automatically generate the tags as opposed to simply trying to remember previous tags that might be relevant and simultaneously come up with new tags that might describe the content accurately.\nPointwise Mutual Information seems to be the stackoverflow recommendation most voted for here. So there\u0026rsquo;s that, which if we\u0026rsquo;re being honest seems like a much more interesting and perhaps applicable skill than fixing the existing multi-word tags/cats issue.\nImpact Effort Matrix This morning I was learning a little about the use of the impact/Effort Matrix as a means to decide the next course of action in a project. There\u0026rsquo;s far more to it than that but it piqued my interest, and relates directly to an earlier post\u0026rsquo;s questions regarding burnout.\nSo that seems like a fun rabbit hole. #TODO\n","date":"2022-06-25","permalink":"https://www.davidjnevin.com/code/site_design_update_2022_06_25/","tags":["Design Updates","Hugo","Templates","Usability"],"title":"Site Design Update"},{"content":"Vim Update I\u0026rsquo;m feeling more comfortable using Vim these last few days, although I admit the arrow keys are getting too much attention. Some habits are difficult to break. I\u0026rsquo;m comfortable with the commands from the first two stages, but still not feeling like I\u0026rsquo;m doing any of them without thought.\nThere is an occasional feeling of \u0026lsquo;wow\u0026rsquo; however when I insert a line or manage a yank and put as I intended.\nBurnout or hitting the wall I\u0026rsquo;m still undecided on this, but am paying attention to my sharpness and motivation levels. Undoubtedly there is a satisfaction in achieving a certification or and to be honest more so the feeling of an output passing a leetcode test. There is also the realization of the how much I am learning and absorbing.\nBut, it\u0026rsquo;s a lonely endeavour at present. Here in Valencia, Spain, there is a meetup for Python Valencia, but it hasn\u0026rsquo;t seen much activity for some time. I\u0026rsquo;m going to reach out and see if there are any events, meetups or otherwise I could attend. Like in my fiction writing a group of similarly motivated people always helps keep spirits up when the the weather is inclement.\nProgress I\u0026rsquo;ve finished the the first three courses of the four I want to do in Educative. So far, I\u0026rsquo;ve done Learn Python 3 from Scratch, Python 3: From Beginner to Advanced, and Data Structures and Algorithms in Python.\nI\u0026rsquo;m currently doing Object-Oriented Programming in Python and am working to complete the Python for Programmers.\nPython in the Wild The more videos I watch regarding getting work in Python and programming in general, the more and more I\u0026rsquo;m leaning towards starting to do some entry level projects. I haven\u0026rsquo;t yet decided on which, but am also beginning to think about where to host or show the projects. This site of course will be the hub or perhaps a distinct domain for coding\u0026hellip;.\nAnd here-in lies the beginnings of over-whelm. Too many decisions, obstacles, options, and tasks, appearing like rungs on an infinite ladder, that I hope is going somewhere.\nSo, breakdown the problem into it\u0026rsquo;s constituent parts and solve for each by applying ideas of similar solutions. I\u0026rsquo;ve been building and maintaining sites for years, the hosting solution for a django site are there, I\u0026rsquo;m sure.\nNext Steps Make contact with the Valencia Python meetup, and find out if there is something going on I can attend.\nFocus on getting working through the Engineering with Utsav: Coding Roadmap and completing the Object-Oriented course.\nKeep an open notebook nearby for project ideas to ferment in.\nKeep up the Vim work. :)\n","date":"2022-06-24","permalink":"https://www.davidjnevin.com/code/taking_stock_2022_06_24/","tags":["Taking Stock","Vim","Community","Burnout"],"title":"Taking Stock"},{"content":"Too Many Vim Commands Getting back into Vim again and decided this time to take it slower and get the basics well in place before I try and incorporate too many commands. It\u0026rsquo;s the same mentality I\u0026rsquo;m bringing to my Python journey and will reapply to C#. The notes below are a mix of my obsidian notes from when I started using Vim in April of 2021 and resources I\u0026rsquo;ve used to better understand the commands this time round.\nPhase One Commands There were too many commands to get stated, so following the advise of The Primeagen Youtube Channel, I\u0026rsquo;m focusing for my first phase on the following commands. w, b, h, j, k, l, y, p, d, v, V, u, :w and :q.\nPhase One Commands Explained command explanation w move forward one word b backwards one word h, j, k, l move left, down, up, right y yank p paste/put d delete v enter visual mode V enter line select visual mode u undo :w write file/save :q quit Phase Two Commands The goals is to feel comfortable with the phase one commands before moving on. Phase two commands are o, O, P, a, A, I, /, n, N, *, $.\nPhase Two Commands Explained command result o open a new line and insert O open a new line above and insert p puts the yanked on the next line P puts the yanked on the previous line i insert before the cursor I insert at the beginning of the line a insert after the cursor (append) A insert at the end of the line (Append) / find n go to next search result N go to previous search result * go to next search result $ go to previous search result Phase Three Commands Phase two commands are f, t, F, T, ;, ,, x, c, D, C, S..\nPhase Three Commands Explained command result f{character} (find) next {character} F{character} (find) previous {character} t{character} until next character T{character} until previous character ; , move to the next or previous result x delete c cut C cut to the end of the line D delete rest of the line S delete the rest of the line and enter insert mode, properly indented Phase Four Commands Phase two commands are g, gg, :line number, G, gi, 18j, {, }, %, di{, yi{, cip, da[\nPhase Four Commands Explained command result g go to last line of the file gg go to first line of file gi go to last insert change point and insert G100 go to line number 100 :100 go to line number 100 dd delete line D delete from cursor to end of line dd delete line D delete from cursor to line end dw delete word d2W delete two words dt; delete until ; d/hell delete until hell* command result cw change word ci change inner ca change around/append ci change inside quotes from line beginning command result y{motion} yank in a direction yaw yanks a word yas yanks a sentence yap yanks a paragraph command explanation e end of word ge go to the end of the previous word gE go to the end of the previous WORD % find matching 0 move to the fist character of a line $ move to the end of the line g_ move to the non-blank character at the end of a line { jump up one paragraph } jump down one paragraph CTRL+D Jump down one page CTRL+U jump up one page So far so good. Search and replace :#,#s/older/new/g where #,# are the line numbers of the range of lines where the substitution is to be done.\n:%s/older/new/g to change every occurrence in the whole file.\n:%s/older/new/gc to find every occurrence in the whole file,\n% typing when on a bracket takes you to the matching bracket.\nBelow are my scattered notes from obsidian, as I progress through the newer commands, I\u0026rsquo;ll add them here. For me at the moment it\u0026rsquo;s about practicing phase one. Once I move onto phase two I\u0026rsquo;ll add phase three etc. Why? Because it\u0026rsquo;ll be great practice using those commands when editing this post.\nMeanwhile hope the notes are helpful.\nAlso discovered a great looking cheat sheet at rtoor Vim Cheat Sheet code at rtoor github.\n#todo Wow Just realized the power of VIm in the following example. [[Vim Learn]].\n// d + i=\u0026gt; wdtSpolite\u0026lt;ESC\u0026gt;fcdsipolite\u0026lt;ESPACE\u0026gt;\u0026lt;ESC\u0026gt; // c =\u0026gt; wctSpolite\u0026lt;ESC\u0026gt;fccwpolitely\u0026lt;ESPACE\u0026gt;\u0026lt;ESC\u0026gt; const courteousSalute = I courteously salute you good person.\u0026quot;; well that example was nothing! Wait till you see what\u0026rsquo;s coming.\nWrite, Quit, Open EX commands start with a : :write saves the file :quit closes the file if there are no changes :edit creates or opens a new or existing file\nVisual Mode command explanation v for character-wise visual mode V for line-wise visual mode C-V for block-wise visual mode Key Mappings command explanation Leader Spacebar Leader + t :tabnew Leader + t + n :tabnext Leader + t + p :tabprev Leader + t + o :tabo **Leader + /** :noh Surround and Motion Sneak explanation options s{char}{char} jump to the f ;next ,previous {operator}z{char}{char} jump to on the previous linence and carry out the operator. ; next , previous w move forward one word b backwards one word W move forward one WORD B backwards one WORD Easy Motion explanation Leader Leader +w Label the beginning of all words ahead Leader Leader +f{char} Label the beginning of {char} ahead Leader Leader +b Label the beginning of all words behind Leader Leader +bd+w/b/f{char} Label the beginning of all words bidirection Leader Leader +e Label the end of all words Leader Leader +ge Label the beginning of all words backwards Leader Leader +j/k Label the beginning of lines down/up Multiple Cursors explanation gb select a word, command to select others switch to VISUAL mode move up or down to set cursors switch to VISUAL mode move to the end or beginning to set cursors Moving Around and Find command explanation w move forward one word b backwards one word W move forward one WORD B backwards one WORD e end of word ge go to the end of the previous word gE go to the end of the previous WORD f{character} (find) next {character} F{character} (find) previous {character} t{character} until next character T{character} until previous character % find matching 0 move to the fist character of a line $ move to the end of the line g_ move to the non-blank character at the end of a line { jump up one paragraph } jump down one paragraph CTRL+D Jump down one page CTRL+U jump up one page Editing Text command result d delete f or / or ? find c change t unTil r{char} replace character under the cursor with {char} R replace more than one character, it functions like delete but acts on as many characters as you type. Delete command result dd delete line D delete from cursor to end of line dd delete line D delete from cursor to line end dw delete word d2W delete two words dt; delete until ; d/hell delete until hell* command result cw change word ci change inner ca change around ci change inside quotes from line beginning Insert and Append command result i insert before the cursor a insert after the cursor (append) I insert at the beginning of the line A insert at the end of the line (Append) Three modified inserts command result o open a new line and insert O open a new line above and insert gi go to last insert change point and insert Wow Just realized the power of VIm in the following example. [[Vim Learn]].\n// d + i=\u0026gt; wdtSpolite\u0026lt;ESC\u0026gt;fcdsipolite\u0026lt;ESPACE\u0026gt;\u0026lt;ESC\u0026gt; // c =\u0026gt; wctSpolite\u0026lt;ESC\u0026gt;fccwpolitely\u0026lt;ESPACE\u0026gt;\u0026lt;ESC\u0026gt; const courteousSalute = I courteously salute you good person.\u0026quot;; well that example was nothing! Wait till you see what\u0026rsquo;s coming.\nWrite, Quit, Open EX commands start with a : :write saves the file :quit closes the file if there are no changes :edit creates or opens a new or existing file\nYank and Put command result y{motion} yank in a direction yaw yanks a word yas yanks a sentence yap yanks a paragraph p puts the after yanked P puts the yanked before the cursor Search and replace :#,#s/older/new/g where #,# are the line numbers of the range of lines where the substitution is to be done.\n:%s/older/new/g to change every occurrence in the whole file.\n:%s/older/new/gc to find every occurrence in the whole file,\n% typing when on a bracket takes you to the matching bracket.\nVisual Mode command explanation v for character-wise visual mode V for line-wise visual mode C-V for block-wise visual mode Key Mappings command explanation Leader Spacebar Leader + t :tabnew Leader + t + n :tabnext Leader + t + p :tabprev Leader + t + o :tabo **Leader + / ** :noh Surround and Motion Sneak explanation options s{char}{char} jump to the first occurrence ;next ,previous {operator}z{char}{char} jump to the first occurrence and carry out the operator. ; next , previous Easy Motion explanation Leader Leader +w Label the beginning of all words ahead Leader Leader +f{char} Label the beginning of {char} ahead Leader Leader +b Label the beginning of all words behind Leader Leader +bd+w/b/f{char} Label the beginning of all words bidirection Leader Leader +e Label the end of all words Leader Leader +ge Label the beginning of all words backwards Leader Leader +j/k Label the beginning of lines down/up Multiple Cursors explanation gb select a word, command to select others switch to VISUAL mode move up or down to set cursors switch to VISUAL mode move to the end or beginning to set cursors Moving Around and Find command explanation w move forward one word b backwards one word W move forward one WORD B backwards one WORD e end of word ge go to the end of the previous word gE go to the end of the previous WORD f{character} (find) next {character} F{character} (find) previous {character} t{character} until next character T{character} until previous character % find matching 0 move to the fist character of a line $ move to the end of the line g_ move to the non-blank character at the end of a line { jump up one paragraph } jump down one paragraph CTRL+D Jump down one page CTRL+U jump up one page Editing Text command result d delete f or / or ? find c change t unTil r{char} replace character under the cursor with {char} R replace more than one character, it functions like delete but acts on as many characters as you type. Delete command result dd delete line D delete from cursor to end of line dd delete line D delete from cursor to line end dw delete word d2W delete two words dt; delete until ; d/hell delete until hell* command result cw change word ci change inner ca change around ci change inside quotes from line beginning Insert and Append command result i insert before the cursor a insert after the cursor (append) I insert at the beginning of the line A insert at the end of the line (Append) Three modified inserts command result o open a new line and insert O open a new line above and insert gi go to last insert change point and insert Wow Just realized the power of VIm in the following example. [[Vim Learn]].\n// d + i=\u0026gt; wdtSpolite\u0026lt;ESC\u0026gt;fcdsipolite\u0026lt;ESPACE\u0026gt;\u0026lt;ESC\u0026gt; // c =\u0026gt; wctSpolite\u0026lt;ESC\u0026gt;fccwpolitely\u0026lt;ESPACE\u0026gt;\u0026lt;ESC\u0026gt; const courteousSalute = I courteously salute you good person.\u0026quot;; well that example was nothing! Wait till you see what\u0026rsquo;s coming.\nWrite, Quit, Open EX commands start with a : :write saves the file :quit closes the file if there are no changes :edit creates or opens a new or existing file\nYank and Put command result y{motion} yank in a direction yaw yanks a word yas yanks a sentence yap yanks a paragraph p puts the after yanked P puts the yanked before the cursor Search and replace :#,#s/older/new/g where #,# are the line numbers of the range of lines where the substitution is to be done.\n:%s/older/new/g to change every occurrence in the whole file.\n:%s/older/new/gc to find every occurrence in the whole file,\n% typing when on a bracket takes you to the matching bracket.\nVisual Mode command explanation v for character-wise visual mode V for line-wise visual mode C-V for block-wise visual mode Key Mappings command explanation Leader Spacebar Leader + t :tabnew Leader + t + n :tabnext Leader + t + p :tabprev Leader + t + o :tabo **Leader + / ** :noh Surround and Motion Sneak explanation options s{char}{char} jump to the first occurrence ;next ,previous {operator}z{char}{char} jump to the first occurrence and carry out the operator. ; next , previous Easy Motion explanation Leader Leader +w Label the beginning of all words ahead Leader Leader +f{char} Label the beginning of {char} ahead Leader Leader +b Label the beginning of all words behind Leader Leader +bd+w/b/f{char} Label the beginning of all words bidirection Leader Leader +e Label the end of all words Leader Leader +ge Label the beginning of all words backwards Leader Leader +j/k Label the beginning of lines down/up Multiple Cursors explanation gb select a word, command to select others switch to VISUAL mode move up or down to set cursors switch to VISUAL mode move to the end or beginning to set cursors ","date":"2022-06-22","permalink":"https://www.davidjnevin.com/code/vim_commands/","tags":["Vim","Commands","Phases"],"title":"Vim Commands"},{"content":"Binary Search Recommended Youtube Playlist Binary searching has been a difficult learning curve for me. It didn\u0026rsquo;t immediately click, so I\u0026rsquo;ve been doing a series of tutorials on youtube. This playlist is excellent.\nSo far, I\u0026rsquo;ve gotten my head around the binary Search itself, Find Closest NUmber, FInd fixed Point, Find Bitonic Peak, Find First Occurrence.\nLater I went through and studied Bisect Method, Square Root and Cyclically Shifted Array.\nThe link to the github code samples is here and I highly recommend the series. It\u0026rsquo;s really helped me develop a deeper understanding of Binary Search in particular and it\u0026rsquo;s many applications.\nVim again Today also marks my return to Vim. I started learning to use Vim in 2021 when I was working on the Critique Wheel but learning to use Vim as I was learning to code in C# and doing so in Visual Studio Code, which was also new to me, seemed well, overwhelming. I did take some good notes, though so I\u0026rsquo;m happy to return and get up to some level of not complete discomfort almost immediately.\nUpwork Account My new Upwork profile is active. I decided to start tying out for some small gigs to get some experience under my belt. Let\u0026rsquo;s see how it goes. So far, it included a moment of realizing that I\u0026rsquo;m unexperienced and under qualified, so I continued, set up my account, balked at the bio section and published.\nThe process was a little like doing these posts. Learn by doing. It\u0026rsquo;ll be revisited many times, but each time I\u0026rsquo;ll attempt to make it just 1% better.\n","date":"2022-06-21","permalink":"https://www.davidjnevin.com/code/binary_search_extended/","tags":["Binary Search","Duplicates","Fixed Point","Find Closest Number","Bitonic Point","Vim","Upwork"],"title":"Binary Search Extended"},{"content":"Binary Search The divide and conquer search method.\nLinear Search The sequential searching through all data entries one by until until we find a match.\nTime complexity is O(n).\ndef linear_search(data, target): for i in range(len(data)): if data[i] == target: return True return False The worst-case runtime of a linear search would be O(n).\nBinary Search (Iterative) Note: assumes that the array on which the search will take place is sorted in ascending order. We start in the middle of the data. If the result is our search term when we finish searching. If not, and is smaller than the target we repeat the process on the upper half of the data, otherwise if the middle is larger than the target search the lower half.\nIn each case we pick a new mid point and choose to search either the upper half or lower half of the data. This is of course much more efficient than an iterative.\ndef binary_search_iterative(data, target): low = 0 high = len(data) - 1 while low \u0026lt;= high: mid = (low + high) // 2 if target == data[mid]: return True elif target \u0026lt; data[mid]: high = mid - 1 else: low = mid + 1 return False The worst-case time complexity of a binary search is O(logn).\nBinary Search (Recursive) def binary_search_recursive(data, target, low, high): if low \u0026gt; high: return False else: mid = (low + high) // 2 if target == data[mid]: return True elif target \u0026lt; data[mid]: return binary_search_recursive(data, target, low, mid-1) else: return binary_search_recursive(data, target, mid+1, high) ","date":"2022-06-20","permalink":"https://www.davidjnevin.com/code/binary_search/","tags":["Binary Search"],"title":"Binary Search"},{"content":"Tentative steps. Today, I took some first tentative steps into understanding Hash tables:\nFascinating topic, and one I\u0026rsquo;m using at present to complete a Caesar Cipher project. (link to here when complete #TODO)\nHere are some excellent resources, I\u0026rsquo;ve found through Engineering with Utsav\nIntro to Hash tables\nHashing and chaining\nSimple Hash table in Python\n","date":"2022-06-20","permalink":"https://www.davidjnevin.com/code/hashing_first_steps/","tags":["Hash Table","Hashing","Hash Function"],"title":"Hashing First Steps"},{"content":"This post is a culmination of previous project related posts. It\u0026rsquo;s useful for me to see the needs develop and to decide when and what to implement and how I can combine the requirements into clear actions to take.\nSidebar Although I chose the minima theme for it\u0026rsquo;s simplicity, it\u0026rsquo;s purpose was to present a personal writing related site. I wanted and still do want a clean experience for the writing posts and pages. The link to this code section is very underrepresented on the homepage, but I think that\u0026rsquo;s okay for now. There is a thought percolating about moving all this code related material to a separate site/domain but it\u0026rsquo;s early days yet for that. Meanwhile, there are a few things I want to learn to do in Hugo and the needs list is a good place to start.\nFor anyone that comes along this site in the future, that is post the changes, all the site had single column text and no sidebars, menus or links to other posts. All navigation was through the split page title links.\nNext and Previous The number of posts has now reached a level where I think it\u0026rsquo;s high time to implement some better navigation methods. Next and previous post links showing the title of the posts at the bottom of each post.\nCertificates Section Next mini-project here on this site is to start to put together a list of certificates and courses I\u0026rsquo;ve done. I am loath to do it in html as opposed to some kind of db solution but we\u0026rsquo;ll see.\nFirst I want to get something visible and linkable, as I\u0026rsquo;m unhappy with the LinkedIn certificates section. Too inflexible and not customizable.\nIt might be as simple as creating new subsection and a matching hugo archetype for certificates. That might be the leanest way forward.\nMost Recent Posts It\u0026rsquo;s getting to that time where I now need a better way to navigate through the site. I need to look into modding the minima theme to include a side bar.\nPossible rabbit hole. :)\n","date":"2022-06-19","permalink":"https://www.davidjnevin.com/code/site_projects_june_19th/","tags":["Certificates","Next Post","Previous","Recent Posts"],"title":"Site Projects June 19th"},{"content":"Definition A binary search tree (BST) is a tree data structure in which nodes are arranged according to the following property.\nThe value of the left child of any node will be less than whatever value in that node, and the value of the right child of the node will be greater than the value in that node.\nIf there aren\u0026rsquo;t exactly two children, the reference to the non-existent child will contain null value.\nSearch We employ the same criteria when searching. Starting form the root we decide which branch to search by comparing the search value with the current node. We then traverse the appropriate branch and repeat the process, thus greatly speeding up the search.\nTime Operation If the tree is non-linear the search time is O(logn) and in the worst case where the tree is linear, O(n).\nImplementation class Node(object): def __init__(self, data): self.data = data self.left = None self.right = None class BST(object): def __init__(self, root): self.root = Node(root) Algorithm Average Case Worst Case Search O(logn) O(n) Insert O(logn) O(n) Delete O(logn) O(n) note:\n| Algorithm | Average Case | Worst Case | | :-------: | :----------: | :--------: | | Search | O(_logn_) | O(n) | | Insert | O(_logn_) | O(n) | | Delete | O(_logn_) | O(n) | source: Markdown: How to Create a Table\n","date":"2022-06-19","permalink":"https://www.davidjnevin.com/code/binary_search_tree/","tags":["Binary","Tree","Search"],"title":"Binary Search Tree"},{"content":"Definition Level Order traversal is a breath first transversal. The traversal starts at the root and explores all the nodes at the same depth prior to moving onto the next depth level. A queue is normally needed to capture and keep track of the child nodes encountered bu not yet explored.\nA breath-first traversal works well on infinite or cyclical tree, where a depth first traversal might never return with an answer or get lost in the data structure.\nImplementation def levelorder_print(self, start): if start is None: return queue = Queue() queue.enqueue(start) traversal = \u0026quot;\u0026quot; while len(queue) \u0026gt; 0: traversal += str(queue.peek()) + \u0026quot;-\u0026quot; node = queue.dequeue() if node.left: queue.enqueue(node.left) if node.right: queue.enqueue(node.right) return traversal Complexity (using a queue) Average Case Worst Case O(n) O(n) sources:\nPython for Beginners: Level Order Tree Traversal\nEducative: Data Structures and Algorithms\nWikipedia: Breath-First Search\nGeeks for Geeks: Level Order Binary Tree Traversal\n","date":"2022-06-19","permalink":"https://www.davidjnevin.com/code/level_order_traversal_binary_tree/","tags":["Binary Tree","Level Order Traversal","Level Order"],"title":"Level Order Traversal Binary Tree"},{"content":"Tree Traversals (Preorder, Inorder and Postorder) From the root of a binary tree, traverse deeper before going laterally.\nPreorder - Node Left Right\nInorder - Left Node Right\nPostorder - Left Right Node\nPreorder Traversal (nlr) A useful collection type to navigate the nodes traversed is a stack1.\nIteration of Preorder Traversal Push the root to the stack.\nIs the stack empty?\nThen pop the stack, and record/output the node name/value as visited.\nCheck if the node has children. If yes, continue.\nPush the right, then left children into the stack.\nEnd of first iteration.\nRepeat for the top value in the stack and continue.\nThis traversal is Time O(n), and Space O(n)\ndef preorder_print(self, start, traversal): \u0026quot;\u0026quot;\u0026quot;Node-\u0026gt;Left-Right\u0026quot;\u0026quot;\u0026quot; if start: traversal += str(start.value) + \u0026quot;-\u0026quot; traversal = self.preorder_print(start.left, traversal) traversal = self.preorder_print(start.right, traversal) return traversal Inorder Traversal (lnr) From the root of a binary tree, traverse laterally before going deeper.\nA useful collection type to navigate the nodes traversed is a queue.2\nIteration of Inorder Traversal Add the root to the queue.\nIs the queue empty?\nThen pop the queue, and record/output the node name/value as visited.\nCheck if the node has children. If yes, continue.\nPush the left, then right children to the queue.\nEnd of first iteration.\nRepeat for the top value in the stack and continue.\nThis traversal is Time O(n), and Space O(n). Assumes maximum efficiency of add and remove operations from the queue.\ndef inorder_print(self, start, traversal): \u0026quot;\u0026quot;\u0026quot;Left-\u0026gt;Node-\u0026gt;Right\u0026quot;\u0026quot;\u0026quot; if start: traversal = self.inorder_print(start.left, traversal) traversal += str(start.value) + \u0026quot;-\u0026quot; traversal = self.inorder_print(start.right, traversal) return traversal Postorder Traversal (lrn) From the root traverse to the leaves first then back to the root. This algorithm can be used to delete trees.\nIteration of Postorder Traversal Check if the current node is empty/null.\nTraverse the left subtree by recursively calling the post-order method.\nTraverse the right subtree by recursively calling the post-order method.\nDisplay/Act upon on the current node.\nRepeat until the current node is the root and act upon the root.\ndef postorder_print(self, start, traversal): \u0026quot;\u0026quot;\u0026quot;Left-\u0026gt;Right-\u0026gt;Node\u0026quot;\u0026quot;\u0026quot; if start: traversal = self.postorder_print(start.left, traversal) traversal = self.postorder_print(start.right, traversal) traversal += str(start.value) + \u0026quot;-\u0026quot; return traversal Admittedly, I\u0026rsquo;m finding this topic challenging to study on my own, however writing down what I understand has always helped that process.\nAt some point I think it will be useful to return here and put together some cohesive notes for myself and any one else poking around these posts.\nSources:\nBinary Tree Algorithms for Technical Interviews - Full Course\nEducative: Data Structures and Algorithms - Binary Trees\nPreorder Tree Traversal Algorithm in Python\nBinary Tree Algorithms for Technical Interviews - Full Course\nBinary Tree Bootcamp: Full, Complete, \u0026amp; Perfect Trees. Preorder, Inorder, \u0026amp; Postorder Traversal.\nHow to add footnotes in Markdown?\nThis is an example of how to create a footnote[^1] in Markdown. [^1]: A note placed at the bottom of a page of a book or manuscript that comments on or cites a reference for a designated part of the text. A sequential data structure that can take in data and only returns the last in value. LIFO.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nA sequential data structure where we can add to the back and pull from the front of the que. See FIFO, LIFO, and Priority Queues\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2022-06-18","permalink":"https://www.davidjnevin.com/code/binary_tree_traversals/","tags":["Binary Tree","Preorder","Inorder","Postorder"],"title":"Depth Order Traversals: Binary Tree"},{"content":"Binary Tree Terms A tree has a root and leaves.\nA root node has no parent nodes.\nA leaf node has zero children.\nA lef node is an external node, non leaf node are internal nodes.\nThe degree of a node is the number of children of that node. The lines between nodes are called edges.\nBinary Tree Characteristics In a binary tree, each node has a maximum of two children. In a classic binary tree there is one root. There is only one unique path from any node to the root An empty tree has no nodes, and should be considered a binary tree.\nclass Node(object): def __init__(self, value): self.value = value self.left = None self.right = None A Full Binary Tree Every node that has a descendant has two descendants.\nA Complete Binary Tree When we fill out the tree we go from top to bottom and then left to right. All levels are completely filled out except the lowest level nodes which are filled from as left as possible.\nA Perfect Binary Tree All nodes with descendants have two descendants and all leaves are on the same level.\nHeight or Depth A tree height is the number of edges to reach the furthest node.\nThe height of a particular node is the number of edges to reach the node. The root is at height 0.\nLevel The level of a node is the number of edge to traverse to reach the node from the root. The root is at level 0.\n","date":"2022-06-17","permalink":"https://www.davidjnevin.com/code/binary_tree_terms/","tags":["Data Structure","Height","Depth","Size","Node"],"title":"Binary Tree Terms"},{"content":"Certificates Section Next mini-project here on this site is to start to put together a list of certificates and courses I\u0026rsquo;ve done. I am loath to do it in html as opposed to some kind of db solution but we\u0026rsquo;ll see.\nFirst I want to get something visible and linkable, as I\u0026rsquo;m unhappy with the LinkedIn certificates section. Too inflexible and not customizable.\nIt might be as simple as creating new subsection and a matching hugo archetype for certificates. That might be the leanest way forward.\nMost Recent Posts It\u0026rsquo;s getting to that time where I now need a better way to navigate through the site. I need to look into modding the minima theme to include a side bar.\nPossible rabbit hole. :)\n","date":"2022-06-17","permalink":"https://www.davidjnevin.com/code/site_projects_17_06_2022/","tags":["Certificates"],"title":"Site Projects - June 17th"},{"content":"Finished the Arrays section I\u0026rsquo;ve been working through the Data Structures and Algorithms course on Educative to develop my python skills.\nLearned the two sum problem, optimal task assignment, intersections of two sorted lists, arbitrary precision increment and array advance games solutions.\nFascinating look into the the world of algorithms. Lots more to se of course but really enjoying the progress and the insights.\nI also did a quick \u0026ldquo;level test\u0026rdquo; and received a proficiency badge. So that\u0026rsquo;s nice.\nProficiency badge\nQuite happy with only a month under my belt in python.\n","date":"2022-06-17","permalink":"https://www.davidjnevin.com/code/arrays_educative/","tags":["Arrays"],"title":"Arrays Educative"},{"content":"Let\u0026rsquo;s try out PlantUML PlantUML seems at first glance somewhat similar to Mermaid but with a wider function list.\nFollowing instructions from Paul Dugas I set up a shortcode and added a js file to the assets\u0026gt;static folder.\nLet\u0026rsquo;s see:\nHey that worked!\nCode:\n{{\u0026lt; plantuml id=\u0026quot;example\u0026quot; \u0026gt;}} David -\u0026gt; Nevin: J {{\u0026lt; /plantuml \u0026gt;}} The id created a \u0026lt;img id=\u0026quot;plantuml-example\u0026quot;... tag.\nBack to linked lists First some experimentation with sequences.\nBut wait The above PlantUML image is stored and pulled from http://www.plantuml.com/plantuml/img/ut99BCjCKT2rK_1BBSlCirBmuW80. That\u0026rsquo;s not ideal. I\u0026rsquo;d prefer to use a local server and output the image into my assets\u0026gt;images folder.\nSo for my MacOS following these instructions:\nbrew install --cask temurin brew install graphviz Then tried this in an *.md file.\n@startuml David -\u0026gt; Nevin: J @enduml No joy.\nInstall a previewer in VSCOde. I installed the PlantUML Previewer extension and it started to work. I have to create *.puml files.\nNext step is to see how I can process these files into SVG, and save them into the images folder. Beginning to think maybe I\u0026rsquo;m over thinking the problem. Mightn\u0026rsquo;t it be easier to just create the images I want in an image editor.\nBut I know the answer to that already. I want something I can source control and also use git diff with. An image file won\u0026rsquo;t give me that.\nSo, I can experiment with *.puml files but can\u0026rsquo;t output the svg file yet.\nAnd then, I managed to export the svg below with minimum hassle.\nOk, I\u0026rsquo;ve found a stackoverflow question that shows some real promise in terms of me showing a linked list.\nThat\u0026rsquo;s enough for tonight. Educative\u0026rsquo;s Data Structures and Algorithms in Python awaits.\n","date":"2022-06-16","permalink":"https://www.davidjnevin.com/code/plantuml_first_attempts/","tags":["Design","Markdown"],"title":"PlantUML: First Attempts"},{"content":"Mermaid setup. Really basic first effort.\nI created a shortcodes folder under my theme layouts folder, adn there created a mermaid.html with the following code.\n\u0026lt;script async type=\u0026quot;application/javascript\u0026quot; src=\u0026quot;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\u0026quot;\u0026gt; var config = { startOnLoad:true, theme: '{{ if .Get \u0026quot;theme\u0026quot; }}{{ .Get \u0026quot;theme\u0026quot; }}{{ else }}dark{{ end }}', align:'{{ if .Get \u0026quot;align\u0026quot; }}{{ .Get \u0026quot;align\u0026quot; }}{{ else }} center{{ end }}' }; mermaid.initialize(config); \u0026lt;/script\u0026gt; \u0026lt;div class=\u0026quot;mermaid\u0026quot;\u0026gt; {{.Inner}} \u0026lt;/div\u0026gt; Markdown Mermaid Pie Chart The markdown to create the pie chart is as follows.\n{{\u0026lt; mermaid align=\u0026quot;left\u0026quot; theme=\u0026quot;neutral\u0026quot; \u0026gt;}} pie title French Words I Know \u0026quot;Merde\u0026quot; : 50 \u0026quot;Oui\u0026quot; : 35 \u0026quot;Alors\u0026quot; : 10 \u0026quot;Non\u0026quot; : 5 {{\u0026lt; /mermaid \u0026gt;}} note: A neat trick to get go code to display well in code blocks is to comment out/escape the contents of the mermaid opening and closing tags in your markdown. I used \u0026lt;/* mermaid align=\u0026quot;left\u0026quot; theme=\u0026quot;neutral\u0026quot; */\u0026gt; and \u0026lt;/* mermaid */\u0026gt;, a method I saw at //robb.sh\u0026rsquo;s github repo of his site\u0026rsquo;s source code.\npie title Cities I've lived in \"Limerick\": 5 \"Dublin\" : 3 \"Madrid\" : 15 \"Valencia\" : 7 I followed the instructions as described here by .//robb.sh. Lovely site.\nRepresenting lists I\u0026rsquo;d like to represent linked lists, singly linked possibly doubly linked and maybe even a branched tree. Let\u0026rsquo;s see.\nSingly Linked First attempt, using this Mermaid Cheat Cheat Sheet and Mermaid-js.github\ngraph LR 1--\u003e2--\u003e3--\u003e4--\u003e5--\u003e6 Code:\n{{\u0026lt; mermaid align=\u0026quot;left\u0026quot; theme=\u0026quot;neutral\u0026quot; \u0026gt;}} graph LR 1--\u0026gt;2--\u0026gt;3--\u0026gt;4--\u0026gt;5--\u0026gt;6 {{\u0026lt; /mermaid \u0026gt;}} Getting there, but not great. I want to demonstrate the idea of node.next and later node.previous linking from the nodes.\nThis is closer:\nclassDiagram Node02 \u003c|-- Node01 : next Node01 : data / value Node01 : next() Node02 : data / value Node02 : next() Code:\n{{\u0026lt; mermaid align=\u0026quot;left\u0026quot; theme=\u0026quot;neutral\u0026quot; \u0026gt;}} classDiagram Node02 \u0026lt;|-- Node01 : next Node01 : data / value Node01 : next() Node02 : data / value Node02 : next() {{\u0026lt; /mermaid \u0026gt;}} Arrow type options I experimented with a node as a subroutine but to no avail.\nflowchart LR Node01-. next .-\u003eNode02 Node02-- next --\u003eNode03 Node03== next ==\u003eNode04 Node04 ==\u003e None Ok, so there\u0026rsquo;s options of arrows. I haven\u0026rsquo;t been able to subdivide the node yet.\nCode:\n{{\u0026lt; mermaid align=\u0026quot;left\u0026quot; theme=\u0026quot;neutral\u0026quot; \u0026gt;}} flowchart LR Node01-. next .-\u0026gt;Node02 Node02-- next --\u0026gt;Node03 Node03== next ==\u0026gt;Node04 Node04 ==\u0026gt; None {{\u0026lt; /mermaid \u0026gt;}} Oh here we go! Subgraphs!\nflowchart LR subgraph LinkedList direction LR subgraph Node01 direction LR node01Prev[Prev] node01Data[Data] node01Next[Next] end subgraph Node02 direction LR node02Prev(Prev) node02Data(Data) node02Next(Next) end end node01Next --\u003e Node02 node02Prev--\u003e Node01 This is not what I was expecting form the code below:\n{{\u0026lt; mermaid align=\u0026quot;left\u0026quot; theme=\u0026quot;neutral\u0026quot; \u0026gt;}} flowchart LR subgraph LinkedList direction LR subgraph Node01 direction LR node01Prev[Prev] node01Data[Data] node01Next[Next] end subgraph Node02 direction LR node02Prev(Prev) node02Data(Data) node02Next(Next) end end node01Next --\u0026gt; Node02 node02Prev --\u0026gt; Node01 {{\u0026lt; /mermaid \u0026gt;}} Updating Mermaid? I thought, I\u0026rsquo;d detter check if I\u0026rsquo;m using the latest. So I altered the mermaid.html to this:\n// initialize Mermaid to [1] log errors, [2] have loose security for first-party // authored diagrams, and [3] respect a preferred dark color scheme \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; import mermaid from \u0026quot;https://cdn.skypack.dev/mermaid@8.14.0\u0026quot;; var config = { startOnLoad:true, logLevel: \u0026quot;error\u0026quot;, // [1] securityLevel: \u0026quot;loose\u0026quot;, // [2] theme: (window.matchMedia \u0026amp;\u0026amp; window.matchMedia(\u0026quot;(prefers-color-scheme: dark)\u0026quot;).matches) ? \u0026quot;dark\u0026quot; : \u0026quot;default\u0026quot; }; mermaid.initialize(config); \u0026lt;/script\u0026gt; \u0026lt;div class=\u0026quot;mermaid\u0026quot;\u0026gt; {{.Inner}} \u0026lt;/div\u0026gt; Using this CSS Tricks post as a guide.\nNo difference to my linked list rendering. It seems like the direction functionality is not\u0026hellip; well, just not.\nTime to do some more research.\ncontinue\n","date":"2022-06-16","permalink":"https://www.davidjnevin.com/code/mermaid_first_attempts/","tags":["Design"],"title":"Mermaid: First Attempts"},{"content":"Okay so that\u0026rsquo;s better. A simpler approach worked. I got playing with a copy of my primary *.html pages in the theme layout folder. I followed the advice to create a subfolder with the same name as my section.\nI copied in my files and then altered them there. Also I added a _index.md to my section folder in the content folder.\nThese tweaks allowed me to alter the site title, adding a link to the section homepage as an additional text in the original title. I like this.\nThe file duplications allowed me to add the option to show menus, and breadcrumbs only in this section should I wish. I don\u0026rsquo;t think I\u0026rsquo;ll need them just yet.\nI have experimented with series, for example this and the previous two hugo theme related posts are part of the same series, but I don\u0026rsquo;t know yet how to display or paginate through a series.\nMore on that later.\nRight now it\u0026rsquo;s back to python and leetCode. I found a svg path for the leetCode icon, so that\u0026rsquo;s added to footer.\n","date":"2022-06-15","permalink":"https://www.davidjnevin.com/code/hugo_section_theme_003/","tags":["Design"],"title":"Hugo Section Theme 3"},{"content":"Question: If I just copy the template? What happens if I just copy the single.html into the layout/code folder?\nThis is what happens, which in hindsight makes sense.\nI copied over the partial in question and plonked it into the same sub-folder. That didn\u0026rsquo;t work.\nI tried copying over the partials, editing the references in the template but without knowing what I\u0026rsquo;m doing I don\u0026rsquo;t know ifI\u0026rsquo;m getting closer or not to a solution or just digging a hole.\nAm off to read up on the docs from gohugo.io, but tomorrow, it\u0026rsquo;s 2.36am and I teach at 9.\nSeven hours later\u0026hellip;\nA break in class and I\u0026rsquo;ve found this useful hugo discourse thread. The solution proposed is to add the template foo.html file to the section folder, and using layout: foo parameter in the front matter of the items in the folder.\nI copied the single.html and updated the front matter to the following:\ntitle: \u0026quot;Hugo Section Theme 002\u0026quot; date: 2022-06-15T02:16:41+02:00 draft: false showthedate: true showtoc: true description: \u0026quot;This is part two of me trying to setup a distinct theme for a subsection of this Hugo site \u0026quot; tags: [\u0026quot;Design\u0026quot;] categories: [\u0026quot;Hugo\u0026quot;] layout: \u0026quot;single.html\u0026quot; That doesn\u0026rsquo;t work.\nSuffice to say, that after a few video tutorials, a number of blog posts, and a few stackoverflow searches there appears to be two solutions.\nRewrite the existing theme to coexist with the current theme. (major time investment and super interested in developing what would essentially be a frankenstein theme of my own creation, but\u0026hellip; time and focus.)\nCreate a second Hugo site, and have it publish into my existing public folder. This will require another git repo or submodule and less time to do. But also.. time.\nKey take away, a different theme running on a section of a Hugo site is doable, but it\u0026rsquo;s not my core concern. Best and quickest solution, might just be to put together an alternative single.html file, maybe single_with_frills.html to display a sidebar of recent posts and a breadcrumb/menu in the code section pages. That\u0026rsquo;ll have to do.\nIn that way I can avoid some of the potential nightmares of CSS blackholes and inconsistencies across the site.\nSimple is best. If you see a side bar on this page in the future you know I got it working. #TODO\ncontinued\n","date":"2022-06-15","permalink":"https://www.davidjnevin.com/code/hugo_section_theme_002/","tags":["Design"],"title":"Hugo Section Theme 2 (didn't work)"},{"content":"Hugo Section: A different look and feel. I though that in order to set a different look and feel for a Hugo section, I\u0026rsquo;d create a folder in the current theme layout folder with the same name as the section. In my case that\u0026rsquo;s code.\nThe theme I\u0026rsquo;m interested in using and adapting is Book or Geekdoc but both require the extened Hugo version. I don\u0026rsquo;t know what that will do to my main site and SASS setup with gulp, so I\u0026rsquo;m steering clear of that for now.\nInstead, I\u0026rsquo;m going to try out Cupper using the git command from the root directory of my site. Once it\u0026rsquo;s in place I\u0026rsquo;ll try move it over to my section folder and see what happens.\nBefore I do, I check my git status and make sure I\u0026rsquo;ve pushed and pulled everything. That way I\u0026rsquo;ll have a rollback point.\nLet\u0026rsquo;s see what happens.\n\u0026gt; Nope didn't like that. Rabbit Hole Warning I saw a few themes I liked, and decided to try upgrade my Hugo version, and my Go version. Rabbit hole.\nSo I discovered that my homebrew was outdated. I hadn\u0026rsquo;t updated in a while and not since I upgraded the OS to Monterey.\nI tried updating mac ports. Nope. Then brew, tired brew doctor and saw instructions to upgrade xcode. That\u0026rsquo;s still happening.\nImages insertion in Hugo 30 mins later\u0026hellip;\nGave me time to edit the screen shot in Gimp\nNeeded to look up how to do that with alt text.\n![Xcode upgrade](/images/xcode-install-2022-6-15.png \u0026quot;That was more involved.\u0026quot;) A future task will be to write some CSS to work on blockquote. That\u0026rsquo;ll come after the theme decisions. Function first.\n\u0026gt; Don't believe in the estimated time of downloads. One minute and 42 seconds left. The tension rises as the time runs out, and then stops and then increases.\nNot sure I should be running updates from the terminal and from the system preferences panes at the same time. Fingers crossed the Apple techs taught of this mayhem when testing.\nUser and Writer Friendly Theme I looked for a theme that I feel would reflect a little the idea of this blog and also give me reign to play wth it a little if I needed to. But right now, the goal is to get a nice clean, user and writer friendly theme up and running in this section.\nThis one is great. Whisper but it requires Hugo Pipelines.\nNo. Wait.\nThis is the one. Eureka. I installed using git submodules.\ngit submodule add https://github.com/wangchucheng/hugo-eureka.git themes/eureka Now the commits are getting hairy.\nDownloaded no problems. The theme is now siting in my themes folder, but that\u0026rsquo;s not where I want it. I\u0026rsquo;m going to do a dirty copy and paste of the single.html and see what happens.\ncontinued\n","date":"2022-06-15","permalink":"https://www.davidjnevin.com/code/hugo_section_theme/","tags":["Design"],"title":"Hugo Section Theme (didn't work)"},{"content":"Raison d\u0026rsquo;être o el porque I built and deployed the Beta version of the critique wheel site in response to a need for the fiction writers in my writing groups to get faster and more actionable critiques on their short stories.\nFrom my Github records, I added the .gitignore on 15 May 2021, so I consider that the start date of the project.\nRazor Pages, MySQL The wheel is build on .Net 5 framework using Razor pages, running off a MySQL database. I cobbled it together over a period of months. It\u0026rsquo;s been a good Beta.\nA little Ajax I\u0026rsquo;m most proud of the seamless autosave of draft critiques as they are written. This uses an ajax call every few seconds. This took me a long time to get right.\nIdentityfraaaammme\u0026hellip; The wheel uses Microsoft\u0026rsquo;s built-in Identityframework to manage authorization and authentication, which I\u0026rsquo;m unhappy with. While it was relatively easy to implement it\u0026rsquo;s been a real pain to try and optimize. Logins are as slow as Monday mornings.\nLook and feel The site looks great, thanks to a html theme I bought. When I finished the site, I discovered Tim Corey\u0026rsquo;s excellent youtube channel and courses. That\u0026rsquo;s when I realized I could and should rebuild a better wheel.) and customized for the site. After C#, I foolishly thought CSS would be easier. This was not the case. It\u0026rsquo;s working thanks to Kevin Powell\u0026rsquo;s CSS tutorials here.\nVersion 1.0 The next iteration is planned to run on Blazor pages, continue to use MySQL (although I am toying with the NoSQL MongDB).\nThe user management system will use Azure B2C, although their login will require some fine tuning.\nI\u0026rsquo;ll tag any future #critiquewheel posts as such.\n","date":"2022-06-14","permalink":"https://www.davidjnevin.com/code/critique_wheel_csharp/","tags":["critiquewheel","C#","Hugo","CSS","RazorPages","Blazor",".Net"],"title":"Critique Wheel C#"},{"content":"Start here As of today, I\u0026rsquo;ve been re-experimenting with programming for 13 months.\nThis is the first blog post on the topic of my coding experiences. I\u0026rsquo;ve no doubt this layout will develop and mature as I add content.\nI hope it serves as a useful resource for anyone that stumbles across it.\nThis Site This site itself is built using Hugo, a static site generator written in Go. I don\u0026rsquo;t know Go and Hugo doesn\u0026rsquo;t require any deep programming skills. The documentation and community is great and it\u0026rsquo;s free.\nThis site uses a neat trick of a git submodule to continuously update the live version wth any changes.\nIt also uses SASS via gulp, which is really useful to have running with a live preview of any CSS changes.\nMy biggest programming project to date has been the Critique Wheel written in C#. Once the site is redone, I think I\u0026rsquo;ll be looking at integrating C# and python into some project.\nnote: The above internal link in Hugo uses the following code to create a relative link to another page:\n[My biggest programming project to date](/code/critique_wheel_csharp/) ","date":"2022-06-14","permalink":"https://www.davidjnevin.com/code/first_commit/","tags":["First"],"title":"First Commit"}]