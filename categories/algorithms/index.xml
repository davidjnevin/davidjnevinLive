<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on David J Nevin</title>
    <link>https://www.davidjnevin.com/categories/algorithms/</link>
    <description>Recent content in Algorithms on David J Nevin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2022 David J. Nevin</copyright>
    <lastBuildDate>Sat, 18 Jun 2022 15:10:51 +0200</lastBuildDate><atom:link href="https://www.davidjnevin.com/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Depth Order Traversals: Binary Tree</title>
      <link>https://www.davidjnevin.com/code/binary_tree_traversals/</link>
      <pubDate>Sat, 18 Jun 2022 15:10:51 +0200</pubDate>
      
      <guid>https://www.davidjnevin.com/code/binary_tree_traversals/</guid>
      <description>Tree Traversals (Preorder, Inorder and Postorder) From the root of a binary tree, traverse deeper before going laterally.
Preorder - Node Left Right
Inorder - Left Node Right
Postorder - Left Right Node
Preorder Traversal (nlr) A useful collection type to navigate the nodes traversed is a stack1.
Iteration of Preorder Traversal Push the root to the stack.
Is the stack empty?
Then pop the stack, and record/output the node name/value as visited.</description>
    </item>
    
  </channel>
</rss>
